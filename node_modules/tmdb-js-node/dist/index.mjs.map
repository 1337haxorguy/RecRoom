{"version":3,"sources":["../../core/src/utils/api.ts","../../core/src/v3/account.ts","../../core/src/v3/authentication.ts","../../core/src/v3/certifications.ts","../../core/src/v3/changes.ts","../../core/src/v3/collections.ts","../../core/src/v3/companies.ts","../../core/src/v3/configuration.ts","../../core/src/v3/credits.ts","../../core/src/v3/discover.ts","../../core/src/v3/find.ts","../../core/src/v3/genres.ts","../../core/src/v3/guest-sessions.ts","../../core/src/v3/keywords.ts","../../core/src/v3/lists.ts","../../core/src/v3/movies.ts","../../core/src/v3/networks.ts","../../core/src/v3/people.ts","../../core/src/v3/reviews.ts","../../core/src/v3/search.ts","../../core/src/v3/trending.ts","../../core/src/v3/tv.ts","../../core/src/v3/tv-episode-groups.ts","../../core/src/v3/tv-episodes.ts","../../core/src/v3/tv-seasons.ts","../../core/src/v3/watch-providers.ts","../../core/src/utils/v4proxy.ts","../../core/src/v4/account.ts","../../core/src/v4/auth.ts","../../core/src/v4/list.ts","../../core/src/index.ts","../src/index.ts"],"sourcesContent":["export const buildV3Url = <TParams>(url: string, apiKey?: string, params?: TParams) => {\n  const searchParams = new URLSearchParams();\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        searchParams.append(key, value.join(\",\"));\n      } else {\n        searchParams.append(key, value as string);\n      }\n    }\n  }\n  if (apiKey) searchParams.append(\"api_key\", apiKey);\n\n  return `${url}?${searchParams.toString()}`;\n};\n\nexport const buildV4Url = <TParams>(url: string, params?: TParams) => {\n  const searchParams = new URLSearchParams();\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        searchParams.append(key, value.join(\",\"));\n      } else {\n        searchParams.append(key, value as string);\n      }\n    }\n  }\n  return `${url}?${searchParams.toString()}`;\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { AccountAddToWatchlistResponse } from \"../types/v3/account/add-to-watchlist\";\nimport { AccountGetCreatedListsResponse } from \"../types/v3/account/get-created-lists\";\nimport { AccountGetDetailsResponse } from \"../types/v3/account/get-details\";\nimport { AccountGetFavoriteMoviesResponse } from \"../types/v3/account/get-favorite-movies\";\nimport { AccountGetFavoriteTVShowsResponse } from \"../types/v3/account/get-favorite-tvshows\";\nimport { AccountGetMovieWatchlistResponse } from \"../types/v3/account/get-movie-watchlist\";\nimport { AccountGetRatedMoviesResponse } from \"../types/v3/account/get-rated-movies\";\nimport { AccountGetRatedTVEpisodesResponse } from \"../types/v3/account/get-rated-tvepisodes\";\nimport { AccountGetRatedTVShowsResponse } from \"../types/v3/account/get-rated-tvshows\";\nimport { AccountGetTVShowWatchlistResponse } from \"../types/v3/account/get-tvshow-watchlist\";\nimport { AccountMarkAsFavoriteResponse } from \"../types/v3/account/mark-as-favorite\";\nimport { buildV3Url } from \"../utils/api\";\n\nconst getAccountUrlWithId = (url: string, account_id?: number): string => {\n  let formattedUrl = url;\n\n  if (account_id) {\n    formattedUrl = formattedUrl.replace(\"{account_id}\", account_id.toString());\n  } else {\n    formattedUrl = formattedUrl.replace(\"/{account_id}\", \"\");\n  }\n\n  return formattedUrl;\n};\n\nexport const createV3AccountMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"account\"] => {\n  return {\n    getDetails: async (params) => {\n      return client.get<AccountGetDetailsResponse>(buildV3Url(`${apiUrl}account`, apiKey, params), accessToken);\n    },\n    getCreatedLists: async (params, accountId) => {\n      return client.get<AccountGetCreatedListsResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/lists`, accountId), apiKey, params), accessToken);\n    },\n    getFavoriteMovies: async (params, accountId) => {\n      return client.get<AccountGetFavoriteMoviesResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite/movies`, accountId), apiKey, params), accessToken);\n    },\n    getFavoriteTVShows: async (params, accountId) => {\n      return client.get<AccountGetFavoriteTVShowsResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite/tv`, accountId), apiKey, params), accessToken);\n    },\n    markAsFavorite: async (params, body, accountId) => {\n      return client.post<AccountMarkAsFavoriteResponse, typeof body>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/favorite`, accountId), apiKey, params), body, accessToken);\n    },\n    getRatedMovies: async (params, accountId) => {\n      return client.get<AccountGetRatedMoviesResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/movies`, accountId), apiKey, params), accessToken);\n    },\n    getRatedTVShows: async (params, accountId) => {\n      return client.get<AccountGetRatedTVShowsResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/tv`, accountId), apiKey, params), accessToken);\n    },\n    getRatedTVEpisodes: async (params, accountId) => {\n      return client.get<AccountGetRatedTVEpisodesResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/rated/tv/episodes`, accountId), apiKey, params), accessToken);\n    },\n    getMovieWatchlist: async (params, accountId) => {\n      return client.get<AccountGetMovieWatchlistResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist/movies`, accountId), apiKey, params), accessToken);\n    },\n    getTVShowWatchlist: async (params, accountId) => {\n      return client.get<AccountGetTVShowWatchlistResponse>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist/tv`, accountId), apiKey, params), accessToken);\n    },\n    addToWatchlist: async (params, body, accountId) => {\n      return client.post<AccountAddToWatchlistResponse, typeof body>(buildV3Url(getAccountUrlWithId(`${apiUrl}account/{account_id}/watchlist`, accountId), apiKey, params), body, accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport {\n  AuthenticationCreateGuestSessionResponse,\n  AuthenticationCreateRequestTokenResponse,\n  AuthenticationCreateSessionResponse,\n  AuthenticationCreateSessionWithLoginResponse,\n  AuthenticationCreateSessionFromV4AccessTokenResponse,\n  AuthenticationDeleteSessionResponse,\n} from \"../types/v3/authentication\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3AuthenticationMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"authentication\"] => {\n  return {\n    createGuestSession: async () => {\n      return client.get<AuthenticationCreateGuestSessionResponse>(buildV3Url(`${apiUrl}authentication/guest_session/new`, apiKey), accessToken);\n    },\n    createRequestToken: async () => {\n      return client.get<AuthenticationCreateRequestTokenResponse>(buildV3Url(`${apiUrl}authentication/token/new`, apiKey), accessToken);\n    },\n    createSession: async (body) => {\n      return client.post<AuthenticationCreateSessionResponse, typeof body>(buildV3Url(`${apiUrl}authentication/session/new`, apiKey), body, accessToken);\n    },\n    createSessionWithLogin: async (body) => {\n      return client.post<AuthenticationCreateSessionWithLoginResponse, typeof body>(buildV3Url(`${apiUrl}authentication/token/validate_with_login`, apiKey), body, accessToken);\n    },\n    createSessionFromV4AccessToken: async (body) => {\n      return client.post<AuthenticationCreateSessionFromV4AccessTokenResponse, typeof body>(buildV3Url(`${apiUrl}authentication/session/convert/4`, apiKey), body, accessToken);\n    },\n    deleteSession: async (body) => {\n      return client.delete<AuthenticationDeleteSessionResponse, typeof body>(buildV3Url(`${apiUrl}authentication/session`, apiKey), body, accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { CertificationsGetMovieCertificationResponse, CertificationsGetTVCertificationResponse } from \"../types/v3/certifications\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CertificationsMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"certifications\"] => {\n  return {\n    getMovieCertifications: async () => {\n      return client.get<CertificationsGetMovieCertificationResponse>(buildV3Url(`${apiUrl}certification/movie/list`, apiKey), accessToken);\n    },\n    getTVShowCertifications: async () => {\n      return client.get<CertificationsGetTVCertificationResponse>(buildV3Url(`${apiUrl}certification/tv/list`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { ChangesGetMovieChangeListResponse } from \"../types/v3/changes/get-movie-change-list\";\nimport { ChangesGetPersonChangeListResponse } from \"../types/v3/changes/get-person-change-list\";\nimport { ChangesGetTVChangeListResponse } from \"../types/v3/changes/get-tv-change-list\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ChangesMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"changes\"] => {\n  return {\n    getMovieChangeList: async (params) => {\n      return client.get<ChangesGetMovieChangeListResponse>(buildV3Url(`${apiUrl}movie/changes`, apiKey, params), accessToken);\n    },\n    getTVChangeList: async (params) => {\n      return client.get<ChangesGetTVChangeListResponse>(buildV3Url(`${apiUrl}tv/changes`, apiKey, params), accessToken);\n    },\n    getPersonChangeList: async (params) => {\n      return client.get<ChangesGetPersonChangeListResponse>(buildV3Url(`${apiUrl}person/changes`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { CollectionsGetDetailsResponse } from \"../types/v3/collections/get-details\";\nimport { CollectionsGetImagesResponse } from \"../types/v3/collections/get-images\";\nimport { CollectionsGetTranslationsResponse } from \"../types/v3/collections/get-translations\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CollectionsMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"collections\"] => {\n  return {\n    getDetails: async (collectionId, params) => {\n      return client.get<CollectionsGetDetailsResponse>(buildV3Url(`${apiUrl}collection/${collectionId}`, apiKey, params), accessToken);\n    },\n    getImages: async (collectionId, params) => {\n      return client.get<CollectionsGetImagesResponse>(buildV3Url(`${apiUrl}collection/${collectionId}/images`, apiKey, params), accessToken);\n    },\n    getTranslations: async (collectionId, params) => {\n      return client.get<CollectionsGetTranslationsResponse>(buildV3Url(`${apiUrl}collection/${collectionId}/translations`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { CompaniesGetAlternativeNamesResponse } from \"../types/v3/companies/get-alternative-names\";\nimport { CompaniesGetDetailsResponse } from \"../types/v3/companies/get-details\";\nimport { CompaniesGetImagesResponse } from \"../types/v3/companies/get-images\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CompaniesMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"companies\"] => {\n  return {\n    getDetails: async (companyId) => {\n      return client.get<CompaniesGetDetailsResponse>(buildV3Url(`${apiUrl}company/${companyId}`, apiKey), accessToken);\n    },\n    getAlternativeNames: async (companyId) => {\n      return client.get<CompaniesGetAlternativeNamesResponse>(buildV3Url(`${apiUrl}company/${companyId}/alternative_names`, apiKey), accessToken);\n    },\n    getImages: async (companyId) => {\n      return client.get<CompaniesGetImagesResponse>(buildV3Url(`${apiUrl}company/${companyId}/images`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { ConfigurationGetApiConfigurationResponse } from \"../types/v3/configuration/get-api-configuration\";\nimport { ConfigurationGetCountriesResponse } from \"../types/v3/configuration/get-countries\";\nimport { ConfigurationGetJobsResponse } from \"../types/v3/configuration/get-jobs\";\nimport { ConfigurationGetLanguagesResponse } from \"../types/v3/configuration/get-languages\";\nimport { ConfigurationGetPrimaryTranslationsResponse } from \"../types/v3/configuration/get-primary-translations\";\nimport { ConfigurationGetTimezonesResponse } from \"../types/v3/configuration/get-timezones\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ConfigurationMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"configuration\"] => {\n  return {\n    getAPIConfiguration: async () => {\n      return client.get<ConfigurationGetApiConfigurationResponse>(buildV3Url(`${apiUrl}configuration`, apiKey), accessToken);\n    },\n    getCountries: async () => {\n      return client.get<ConfigurationGetCountriesResponse>(buildV3Url(`${apiUrl}configuration/countries`, apiKey), accessToken);\n    },\n    getJobs: async () => {\n      return client.get<ConfigurationGetJobsResponse>(buildV3Url(`${apiUrl}configuration/jobs`, apiKey), accessToken);\n    },\n    getLanguages: async () => {\n      return client.get<ConfigurationGetLanguagesResponse>(buildV3Url(`${apiUrl}configuration/languages`, apiKey), accessToken);\n    },\n    getPrimaryTranslations: async () => {\n      return client.get<ConfigurationGetPrimaryTranslationsResponse>(buildV3Url(`${apiUrl}configuration/primary_translations`, apiKey), accessToken);\n    },\n    getTimezones: async () => {\n      return client.get<ConfigurationGetTimezonesResponse>(buildV3Url(`${apiUrl}configuration/timezones`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { CreditsGetDetailsResponse } from \"../types/v3/credits/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3CreditsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"credits\"] => {\n  return {\n    getDetails: async (creditId: string) => {\n      return client.get<CreditsGetDetailsResponse>(buildV3Url(`${url}credit/${creditId}`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { DiscoverMovieDiscoverResponse } from \"../types/v3/discover/movie-discover\";\nimport { DiscoverTVDiscoverResponse } from \"../types/v3/discover/tv-discover\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3DiscoverMethods = (client: Http, apiUrl: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"discover\"] => {\n  return {\n    movieDiscover: async (params) => {\n      return client.get<DiscoverMovieDiscoverResponse>(buildV3Url(`${apiUrl}discover/movie`, apiKey, params), accessToken);\n    },\n    tvDiscover: async (params) => {\n      return client.get<DiscoverTVDiscoverResponse>(buildV3Url(`${apiUrl}discover/tv`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { FindFindByIdResponse } from \"../types/v3/find/find-by-id\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3FindMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"find\"] => {\n  return {\n    findById: async (externalId: string, params) => {\n      return client.get<FindFindByIdResponse>(buildV3Url(`${url}find/${externalId}`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { GenresGetMovieListResponse } from \"../types/v3/genres/get-movie-list\";\nimport { GenresGetTVListResponse } from \"../types/v3/genres/get-tv-list\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3GenresMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"genres\"] => {\n  return {\n    getMovieList: async (params) => {\n      return client.get<GenresGetMovieListResponse>(buildV3Url(`${url}genre/movie/list`, apiKey, params), accessToken);\n    },\n    getTVList: async (params) => {\n      return client.get<GenresGetTVListResponse>(buildV3Url(`${url}genre/tv/list`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { GuestSessionsGetRatedMoviesResponse } from \"../types/v3/guest-sessions/get-rated-movies\";\nimport { GuestSessionsGetRatedTVEpisodesResponse } from \"../types/v3/guest-sessions/get-rated-tvepisodes\";\nimport { GuestSessionsGetRatedTVShowsResponse } from \"../types/v3/guest-sessions/get-rated-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3GuestSessionsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"guestSessions\"] => {\n  return {\n    getRatedMovies: async (guestSessionId: string, params) => {\n      return client.get<GuestSessionsGetRatedMoviesResponse>(buildV3Url(`${url}guest_session/${guestSessionId}/rated/movies`, apiKey, params), accessToken);\n    },\n    getRatedTVShows: async (guestSessionId: string, params) => {\n      return client.get<GuestSessionsGetRatedTVShowsResponse>(buildV3Url(`${url}guest_session/${guestSessionId}/rated/tv`, apiKey, params), accessToken);\n    },\n    getRatedTVEpisodes: async (guestSessionId: string, params) => {\n      return client.get<GuestSessionsGetRatedTVEpisodesResponse>(buildV3Url(`${url}guest_session/${guestSessionId}/rated/tv/episodes`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { KeywordsGetDetailsResponse } from \"../types/v3/keywords/get-details\";\nimport { KeywordsGetMoviesResponse } from \"../types/v3/keywords/get-movies\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3KeywordsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"keywords\"] => {\n  return {\n    getDetails: async (keywordId) => {\n      return client.get<KeywordsGetDetailsResponse>(buildV3Url(`${url}keyword/${keywordId}`, apiKey), accessToken);\n    },\n    getMovies: async (keywordId, params) => {\n      return client.get<KeywordsGetMoviesResponse>(buildV3Url(`${url}keyword/${keywordId}/movies`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { ListsAddMovieResponse } from \"../types/v3/lists/add-movie\";\nimport { ListsCheckItemStatusResponse } from \"../types/v3/lists/check-item-status\";\nimport { ListsClearListResponse } from \"../types/v3/lists/clear-list\";\nimport { ListsCreateListResponse } from \"../types/v3/lists/create-list\";\nimport { ListsDeleteListResponse } from \"../types/v3/lists/delete-list\";\nimport { ListsGetDetailsResponse } from \"../types/v3/lists/get-details\";\nimport { ListsRemoveMovieResponse } from \"../types/v3/lists/remove-movie\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ListsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"lists\"] => {\n  return {\n    getDetails: async (listId, params) => {\n      return client.get<ListsGetDetailsResponse>(buildV3Url(`${url}list/${listId}`, apiKey, params), accessToken);\n    },\n    checkItemStatus: async (listId, params) => {\n      return client.get<ListsCheckItemStatusResponse>(buildV3Url(`${url}list/${listId}/item_status`, apiKey, params), accessToken);\n    },\n    createList: async (body, params) => {\n      return client.post<ListsCreateListResponse, typeof body>(buildV3Url(`${url}list`, apiKey, params), body, accessToken);\n    },\n    addMovie: async (listId, body, params) => {\n      return client.post<ListsAddMovieResponse, typeof body>(buildV3Url(`${url}list/${listId}/add_item`, apiKey, params), body, accessToken);\n    },\n    removeMovie: async (listId, body, params) => {\n      return client.post<ListsRemoveMovieResponse, typeof body>(buildV3Url(`${url}list/${listId}/remove_item`, apiKey, params), body, accessToken);\n    },\n    clearList: async (listId, params) => {\n      return client.post<ListsClearListResponse>(buildV3Url(`${url}list/${listId}/clear`, apiKey, params), undefined, accessToken);\n    },\n    deleteList: async (listId, params) => {\n      return client.delete<ListsDeleteListResponse>(buildV3Url(`${url}list/${listId}`, apiKey, params), undefined, accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { MoviesAppendToResponse } from \"../types/append-to-response\";\nimport { MoviesDeleteRatingResponse } from \"../types/v3/movies/delete-rating\";\nimport { MoviesGetAccountStatesResponse } from \"../types/v3/movies/get-account-states\";\nimport { MoviesGetAlternativeTitlesResponse } from \"../types/v3/movies/get-alternative-titles\";\nimport { MoviesGetChangesResponse } from \"../types/v3/movies/get-changes\";\nimport { MoviesGetCreditsResponse } from \"../types/v3/movies/get-credits\";\nimport { MoviesGetDetailsParams, MoviesGetDetailsResponse } from \"../types/v3/movies/get-details\";\nimport { MoviesGetExternalIdsResponse } from \"../types/v3/movies/get-external-ids\";\nimport { MoviesGetImagesResponse } from \"../types/v3/movies/get-images\";\nimport { MoviesGetKeywordsResponse } from \"../types/v3/movies/get-keywords\";\nimport { MoviesGetLatestResponse } from \"../types/v3/movies/get-latest\";\nimport { MoviesGetListsResponse } from \"../types/v3/movies/get-lists\";\nimport { MoviesGetNowPlayingResponse } from \"../types/v3/movies/get-now-playing\";\nimport { MoviesGetPopularResponse } from \"../types/v3/movies/get-popular\";\nimport { MoviesGetRecommendationsResponse } from \"../types/v3/movies/get-recommendations\";\nimport { MoviesGetReleaseDatesResponse } from \"../types/v3/movies/get-release-dates\";\nimport { MoviesGetReviewsResponse } from \"../types/v3/movies/get-reviews\";\nimport { MoviesGetSimilarMoviesResponse } from \"../types/v3/movies/get-similar-movies\";\nimport { MoviesGetTopRatedResponse } from \"../types/v3/movies/get-top-rated\";\nimport { MoviesGetTranslationsResponse } from \"../types/v3/movies/get-translations\";\nimport { MoviesGetUpcomingResponse } from \"../types/v3/movies/get-upcoming\";\nimport { MoviesGetVideosResponse } from \"../types/v3/movies/get-videos\";\nimport { MoviesGetWatchProvidersResponse } from \"../types/v3/movies/get-watch-providers\";\nimport { MoviesRateMovieResponse } from \"../types/v3/movies/rate-movie\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3MoviesMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"movies\"] => {\n  return {\n    getDetails: async <T extends MoviesAppendToResponse[]>(movieId: number, params?: MoviesGetDetailsParams<T>) => {\n      return client.get<MoviesGetDetailsResponse<T>>(buildV3Url(`${url}movie/${movieId}`, apiKey, params), accessToken);\n    },\n    getAccountStates: async (movieId, params) => {\n      return client.get<MoviesGetAccountStatesResponse>(buildV3Url(`${url}movie/${movieId}/account_states`, apiKey, params), accessToken);\n    },\n    getAlternativeTitles: async (movieId, params) => {\n      return client.get<MoviesGetAlternativeTitlesResponse>(buildV3Url(`${url}movie/${movieId}/alternative_titles`, apiKey, params), accessToken);\n    },\n    getChanges: async (movieId, params) => {\n      return client.get<MoviesGetChangesResponse>(buildV3Url(`${url}movie/${movieId}/changes`, apiKey, params), accessToken);\n    },\n    getCredits: async (movieId, params) => {\n      return client.get<MoviesGetCreditsResponse>(buildV3Url(`${url}movie/${movieId}/credits`, apiKey, params), accessToken);\n    },\n    getExternalIds: async (movieId) => {\n      return client.get<MoviesGetExternalIdsResponse>(buildV3Url(`${url}movie/${movieId}/external_ids`, apiKey), accessToken);\n    },\n    getImages: async (movieId, params) => {\n      return client.get<MoviesGetImagesResponse>(buildV3Url(`${url}movie/${movieId}/images`, apiKey, params), accessToken);\n    },\n    getKeywords: async (movieId) => {\n      return client.get<MoviesGetKeywordsResponse>(buildV3Url(`${url}movie/${movieId}/keywords`, apiKey), accessToken);\n    },\n    getLists: async (movieId, params) => {\n      return client.get<MoviesGetListsResponse>(buildV3Url(`${url}movie/${movieId}/lists`, apiKey, params), accessToken);\n    },\n    getRecommendations: async (movieId, params) => {\n      return client.get<MoviesGetRecommendationsResponse>(buildV3Url(`${url}movie/${movieId}/recommendations`, apiKey, params), accessToken);\n    },\n    getReleaseDates: async (movieId) => {\n      return client.get<MoviesGetReleaseDatesResponse>(buildV3Url(`${url}movie/${movieId}/release_dates`, apiKey), accessToken);\n    },\n    getReviews: async (movieId, params) => {\n      return client.get<MoviesGetReviewsResponse>(buildV3Url(`${url}movie/${movieId}/reviews`, apiKey, params), accessToken);\n    },\n    getSimilarMovies: async (movieId, params) => {\n      return client.get<MoviesGetSimilarMoviesResponse>(buildV3Url(`${url}movie/${movieId}/similar`, apiKey, params), accessToken);\n    },\n    getTranslations: async (movieId) => {\n      return client.get<MoviesGetTranslationsResponse>(buildV3Url(`${url}movie/${movieId}/translations`, apiKey), accessToken);\n    },\n    getVideos: async (movieId, params) => {\n      return client.get<MoviesGetVideosResponse>(buildV3Url(`${url}movie/${movieId}/videos`, apiKey, params), accessToken);\n    },\n    getWatchProviders: async (movieId) => {\n      return client.get<MoviesGetWatchProvidersResponse>(buildV3Url(`${url}movie/${movieId}/watch/providers`, apiKey), accessToken);\n    },\n    rateMovie: async (movieId, body, params) => {\n      return client.post<MoviesRateMovieResponse, typeof body>(buildV3Url(`${url}movie/${movieId}/rating`, apiKey, params), body, accessToken);\n    },\n    deleteRating: async (movieId, params) => {\n      return client.delete<MoviesDeleteRatingResponse>(buildV3Url(`${url}movie/${movieId}/rating`, apiKey, params), undefined, accessToken);\n    },\n    getLatest: async () => {\n      return client.get<MoviesGetLatestResponse>(buildV3Url(`${url}movie/latest`, apiKey), accessToken);\n    },\n    getNowPlaying: async (params) => {\n      return client.get<MoviesGetNowPlayingResponse>(buildV3Url(`${url}movie/now_playing`, apiKey, params), accessToken);\n    },\n    getPopular: async (params) => {\n      return client.get<MoviesGetPopularResponse>(buildV3Url(`${url}movie/popular`, apiKey, params), accessToken);\n    },\n    getTopRated: async (params) => {\n      return client.get<MoviesGetTopRatedResponse>(buildV3Url(`${url}movie/top_rated`, apiKey, params), accessToken);\n    },\n    getUpcoming: async (params) => {\n      return client.get<MoviesGetUpcomingResponse>(buildV3Url(`${url}movie/upcoming`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { NetworksGetAlternativeNamesResponse } from \"../types/v3/networks/get-alternative-names\";\nimport { NetworksGetDetailsResponse } from \"../types/v3/networks/get-details\";\nimport { NetworksGetImagesResponse } from \"../types/v3/networks/get-images\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3NetworksMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"networks\"] => {\n  return {\n    getDetails: async (networkId: number) => {\n      return client.get<NetworksGetDetailsResponse>(buildV3Url(`${url}network/${networkId}`, apiKey), accessToken);\n    },\n    getAlternativeNames: async (networkId: number) => {\n      return client.get<NetworksGetAlternativeNamesResponse>(buildV3Url(`${url}network/${networkId}/alternative_names`, apiKey), accessToken);\n    },\n    getImages: async (networkId: number) => {\n      return client.get<NetworksGetImagesResponse>(buildV3Url(`${url}network/${networkId}/images`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI, PeopleAppendToResponse } from \"..\";\nimport { PeopleGetChangesResponse } from \"../types/v3/people/get-changes\";\nimport { PeopleGetCombinedCreditsResponse } from \"../types/v3/people/get-combined-credits\";\nimport { PeopleGetDetailsParams, PeopleGetDetailsResponse } from \"../types/v3/people/get-details\";\nimport { PeopleGetExternalIdsResponse } from \"../types/v3/people/get-external-ids\";\nimport { PeopleGetImagesResponse } from \"../types/v3/people/get-images\";\nimport { PeopleGetLatestResponse } from \"../types/v3/people/get-latest\";\nimport { PeopleGetMovieCreditsResponse } from \"../types/v3/people/get-movie-credits\";\nimport { PeopleGetPopularResponse } from \"../types/v3/people/get-popular\";\nimport { PeopleGetTaggedImagesResponse } from \"../types/v3/people/get-tagged-images\";\nimport { PeopleGetTranslationsResponse } from \"../types/v3/people/get-translations\";\nimport { PeopleGetTvCreditsResponse } from \"../types/v3/people/get-tv-credits\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3PeopleMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"people\"] => {\n  return {\n    getDetails: async <T extends PeopleAppendToResponse[]>(personId: number, params?: PeopleGetDetailsParams<T>) => {\n      return client.get<PeopleGetDetailsResponse<T>>(buildV3Url(`${url}person/${personId}`, apiKey, params), accessToken);\n    },\n    getChanges: async (personId, params) => {\n      return client.get<PeopleGetChangesResponse>(buildV3Url(`${url}person/${personId}/changes`, apiKey, params), accessToken);\n    },\n    getMovieCredits: async (personId, params) => {\n      return client.get<PeopleGetMovieCreditsResponse>(buildV3Url(`${url}person/${personId}/movie_credits`, apiKey, params), accessToken);\n    },\n    getTVCredits: async (personId, params) => {\n      return client.get<PeopleGetTvCreditsResponse>(buildV3Url(`${url}person/${personId}/tv_credits`, apiKey, params), accessToken);\n    },\n    getCombinedCredits: async (personId, params) => {\n      return client.get<PeopleGetCombinedCreditsResponse>(buildV3Url(`${url}person/${personId}/combined_credits`, apiKey, params), accessToken);\n    },\n    getExternalIds: async (personId) => {\n      return client.get<PeopleGetExternalIdsResponse>(buildV3Url(`${url}person/${personId}/external_ids`, apiKey), accessToken);\n    },\n    getImages: async (personId) => {\n      return client.get<PeopleGetImagesResponse>(buildV3Url(`${url}person/${personId}/images`, apiKey), accessToken);\n    },\n    getTaggedImages: async (personId, params) => {\n      return client.get<PeopleGetTaggedImagesResponse>(buildV3Url(`${url}person/${personId}/tagged_images`, apiKey, params), accessToken);\n    },\n    getTranslations: async (personId, params) => {\n      return client.get<PeopleGetTranslationsResponse>(buildV3Url(`${url}person/${personId}/translations`, apiKey, params), accessToken);\n    },\n    getLatest: async (params) => {\n      return client.get<PeopleGetLatestResponse>(buildV3Url(`${url}person/latest`, apiKey, params), accessToken);\n    },\n    getPopular: async (params) => {\n      return client.get<PeopleGetPopularResponse>(buildV3Url(`${url}person/popular`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { ReviewsGetDetailsResponse } from \"../types/v3/reviews/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3ReviewsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"reviews\"] => {\n  return {\n    getDetails: async (reviewId: string) => {\n      return client.get<ReviewsGetDetailsResponse>(buildV3Url(`${url}review/${reviewId}`, apiKey), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { SearchMultiSearchResponse } from \"../types/v3/search/multi-search\";\nimport { SearchCollectionsResponse } from \"../types/v3/search/search-collections\";\nimport { SearchCompaniesResponse } from \"../types/v3/search/search-companies\";\nimport { SearchKeywordsResponse } from \"../types/v3/search/search-keywords\";\nimport { SearchMoviesResponse } from \"../types/v3/search/search-movies\";\nimport { SearchPeopleResponse } from \"../types/v3/search/search-people\";\nimport { SearchTVShowsResponse } from \"../types/v3/search/search-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3SearchMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"search\"] => {\n  return {\n    searchCompanies: async (params) => {\n      return client.get<SearchCompaniesResponse>(buildV3Url(`${url}search/company`, apiKey, params), accessToken);\n    },\n    searchCollections: async (params) => {\n      return client.get<SearchCollectionsResponse>(buildV3Url(`${url}search/collection`, apiKey, params), accessToken);\n    },\n    searchKeywords: async (params) => {\n      return client.get<SearchKeywordsResponse>(buildV3Url(`${url}search/keyword`, apiKey, params), accessToken);\n    },\n    searchMovies: async (params) => {\n      return client.get<SearchMoviesResponse>(buildV3Url(`${url}search/movie`, apiKey, params), accessToken);\n    },\n    searchMulti: async (params) => {\n      return client.get<SearchMultiSearchResponse>(buildV3Url(`${url}search/multi`, apiKey, params), accessToken);\n    },\n    searchPeople: async (params) => {\n      return client.get<SearchPeopleResponse>(buildV3Url(`${url}search/person`, apiKey, params), accessToken);\n    },\n    searchTV: async (params) => {\n      return client.get<SearchTVShowsResponse>(buildV3Url(`${url}search/tv`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { TrendingGetTrendingResponse } from \"../types/v3/trending/get-trending\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TrendingMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"trending\"] => {\n  return {\n    getTrending: async (mediaType, timeWindow, language) => {\n      return client.get<TrendingGetTrendingResponse>(buildV3Url(`${url}trending/${mediaType}/${timeWindow}`, apiKey, { language }), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI, TVAppendToResponse } from \"..\";\nimport { TVDeleteRatingResponse } from \"../types/v3/tv/delete-rating\";\nimport { TVGetAccountStatesResponse } from \"../types/v3/tv/get-account-states\";\nimport { TVGetAggregateCreditsResponse } from \"../types/v3/tv/get-aggregate-credits\";\nimport { TVGetAlternativeTitlesResponse } from \"../types/v3/tv/get-alternative-titles\";\nimport { TVGetChangesResponse } from \"../types/v3/tv/get-changes\";\nimport { TVGetContentRatingsResponse } from \"../types/v3/tv/get-content-ratings\";\nimport { TVGetCreditsResponse } from \"../types/v3/tv/get-credits\";\nimport { TVGetDetailsParams, TVGetDetailsResponse } from \"../types/v3/tv/get-details\";\nimport { TVGetEpisodeGroupsResponse } from \"../types/v3/tv/get-episode-groups\";\nimport { TVGetExternalIdsResponse } from \"../types/v3/tv/get-external-ids\";\nimport { TVGetImagesResponse } from \"../types/v3/tv/get-images\";\nimport { TVGetKeywordsResponse } from \"../types/v3/tv/get-keywords\";\nimport { TVGetLatestResponse } from \"../types/v3/tv/get-latest\";\nimport { TVGetPopularResponse } from \"../types/v3/tv/get-popular\";\nimport { TVGetRecommendationsResponse } from \"../types/v3/tv/get-recommendations\";\nimport { TVGetReviewsResponse } from \"../types/v3/tv/get-reviews\";\nimport { TVGetScreenedTheatricallyResponse } from \"../types/v3/tv/get-screened-theatrically\";\nimport { TVGetSimilarTVShowsResponse } from \"../types/v3/tv/get-similar-tvshows\";\nimport { TVGetTopRatedResponse } from \"../types/v3/tv/get-top-rated\";\nimport { TVGetTranslationsResponse } from \"../types/v3/tv/get-translations\";\nimport { TVGetTVAiringTodayResponse } from \"../types/v3/tv/get-tv-airing-today\";\nimport { TVGetTVOnTheAirResponse } from \"../types/v3/tv/get-tv-on-the-air\";\nimport { TVGetVideosResponse } from \"../types/v3/tv/get-videos\";\nimport { TVGetWatchProvidersResponse } from \"../types/v3/tv/get-watch-providers\";\nimport { TVRateTVShowsResponse } from \"../types/v3/tv/rate-tvshows\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TvMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"tv\"] => {\n  return {\n    getDetails: async <T extends TVAppendToResponse[]>(tvId: number, params?: TVGetDetailsParams<T>) => {\n      return client.get<TVGetDetailsResponse<T>>(buildV3Url(`${url}tv/${tvId}`, apiKey, params), accessToken);\n    },\n    getAccountStates: async (tvId, params) => {\n      return client.get<TVGetAccountStatesResponse>(buildV3Url(`${url}tv/${tvId}/account_states`, apiKey, params), accessToken);\n    },\n    getAggregateCredits: async (tvId, params) => {\n      return client.get<TVGetAggregateCreditsResponse>(buildV3Url(`${url}tv/${tvId}/aggregate_credits`, apiKey, params), accessToken);\n    },\n    getAlternativeTitles: async (tvId, params) => {\n      return client.get<TVGetAlternativeTitlesResponse>(buildV3Url(`${url}tv/${tvId}/alternative_titles`, apiKey, params), accessToken);\n    },\n    getChanges: async (tvId, params) => {\n      return client.get<TVGetChangesResponse>(buildV3Url(`${url}tv/${tvId}/changes`, apiKey, params), accessToken);\n    },\n    getContentRatings: async (tvId, params) => {\n      return client.get<TVGetContentRatingsResponse>(buildV3Url(`${url}tv/${tvId}/content_ratings`, apiKey, params), accessToken);\n    },\n    getCredits: async (tvId, params) => {\n      return client.get<TVGetCreditsResponse>(buildV3Url(`${url}tv/${tvId}/credits`, apiKey, params), accessToken);\n    },\n    getEpisodeGroups: async (tvId, params) => {\n      return client.get<TVGetEpisodeGroupsResponse>(buildV3Url(`${url}tv/${tvId}/episode_groups`, apiKey, params), accessToken);\n    },\n    getExternalIds: async (tvId, params) => {\n      return client.get<TVGetExternalIdsResponse>(buildV3Url(`${url}tv/${tvId}/external_ids`, apiKey, params), accessToken);\n    },\n    getImages: async (tvId, params) => {\n      return client.get<TVGetImagesResponse>(buildV3Url(`${url}tv/${tvId}/images`, apiKey, params), accessToken);\n    },\n    getKeywords: async (tvId) => {\n      return client.get<TVGetKeywordsResponse>(buildV3Url(`${url}tv/${tvId}/keywords`, apiKey), accessToken);\n    },\n    getRecommendations: async (tvId, params) => {\n      return client.get<TVGetRecommendationsResponse>(buildV3Url(`${url}tv/${tvId}/recommendations`, apiKey, params), accessToken);\n    },\n    getReviews: async (tvId, params) => {\n      return client.get<TVGetReviewsResponse>(buildV3Url(`${url}tv/${tvId}/reviews`, apiKey, params), accessToken);\n    },\n    getScreenedTheatrically: async (tvId, params) => {\n      return client.get<TVGetScreenedTheatricallyResponse>(buildV3Url(`${url}tv/${tvId}/screened_theatrically`, apiKey, params), accessToken);\n    },\n    getSimilarTVShows: async (tvId, params) => {\n      return client.get<TVGetSimilarTVShowsResponse>(buildV3Url(`${url}tv/${tvId}/similar`, apiKey, params), accessToken);\n    },\n    getTranslations: async (tvId) => {\n      return client.get<TVGetTranslationsResponse>(buildV3Url(`${url}tv/${tvId}/translations`, apiKey), accessToken);\n    },\n    getVideos: async (tvId, params) => {\n      return client.get<TVGetVideosResponse>(buildV3Url(`${url}tv/${tvId}/videos`, apiKey, params), accessToken);\n    },\n    getWatchProviders: async (tvId) => {\n      return client.get<TVGetWatchProvidersResponse>(buildV3Url(`${url}tv/${tvId}/watch/providers`, apiKey), accessToken);\n    },\n    rateTVShow: async (tvId, body, params) => {\n      return client.post<TVRateTVShowsResponse, typeof body>(buildV3Url(`${url}tv/${tvId}/rating`, apiKey, params), body, accessToken);\n    },\n    deleteRating: async (tvId, params) => {\n      return client.delete<TVDeleteRatingResponse>(buildV3Url(`${url}tv/${tvId}/rating`, apiKey, params), undefined, accessToken);\n    },\n    getLatest: async (params) => {\n      return client.get<TVGetLatestResponse>(buildV3Url(`${url}tv/latest`, apiKey, params), accessToken);\n    },\n    getTVAiringToday: async (params) => {\n      return client.get<TVGetTVAiringTodayResponse>(buildV3Url(`${url}tv/airing_today`, apiKey, params), accessToken);\n    },\n    getTVOnTheAir: async (params) => {\n      return client.get<TVGetTVOnTheAirResponse>(buildV3Url(`${url}tv/on_the_air`, apiKey, params), accessToken);\n    },\n    getPopular: async (params) => {\n      return client.get<TVGetPopularResponse>(buildV3Url(`${url}tv/popular`, apiKey, params), accessToken);\n    },\n    getTopRated: async (params) => {\n      return client.get<TVGetTopRatedResponse>(buildV3Url(`${url}tv/top_rated`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { TVEpisodeGroupsGetDetailsResponse } from \"../types/v3/tv-episode-groups/get-details\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVEpisodeGroupsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"tvEpisodeGroups\"] => {\n  return {\n    getDetails: async (params, id) => {\n      return client.get<TVEpisodeGroupsGetDetailsResponse>(buildV3Url(`${url}tv-episode-group/${id}`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI, TVEpisodesAppendToResponse, TVEpisodesGetExternalIDsResponse } from \"..\";\nimport { TVEpisodesDeleteRatingResponse } from \"../types/v3/tv-episodes/delete-rating\";\nimport { TVEpisodesGetAccountStatesResponse } from \"../types/v3/tv-episodes/get-account-states\";\nimport { TVEpisodesGetChangesResponse } from \"../types/v3/tv-episodes/get-changes\";\nimport { TVEpisodesGetCreditsResponse } from \"../types/v3/tv-episodes/get-credits\";\nimport { TVEpisodesGetDetailsParams, TVEpisodesGetDetailsResponse } from \"../types/v3/tv-episodes/get-details\";\nimport { TVEpisodesGetImagesResponse } from \"../types/v3/tv-episodes/get-images\";\nimport { TVEpisodesGetTranslationsResponse } from \"../types/v3/tv-episodes/get-translations\";\nimport { TVEpisodesGetVideosResponse } from \"../types/v3/tv-episodes/get-videos\";\nimport { TVEpisodesRateTVEpisodeResponse } from \"../types/v3/tv-episodes/rate-tv-episode\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVEpisodesMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"tvEpisodes\"] => {\n  return {\n    getDetails: async <T extends TVEpisodesAppendToResponse[]>(tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetDetailsParams<T>) => {\n      return client.get<TVEpisodesGetDetailsResponse<T>>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}`, apiKey, params), accessToken);\n    },\n    getAccountStates: async (tvId, seasonNumber, episodeNumber, params) => {\n      return client.get<TVEpisodesGetAccountStatesResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/account_states`, apiKey, params), accessToken);\n    },\n    getChanges: async (episodeId, params) => {\n      return client.get<TVEpisodesGetChangesResponse>(buildV3Url(`${url}tv/episode/${episodeId}/changes`, apiKey, params), accessToken);\n    },\n    getCredits: async (tvId, seasonNumber, episodeNumber, params) => {\n      return client.get<TVEpisodesGetCreditsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/credits`, apiKey, params), accessToken);\n    },\n    getExternalIds: async (tvId, seasonNumber, episodeNumber) => {\n      return client.get<TVEpisodesGetExternalIDsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/external_ids`, apiKey), accessToken);\n    },\n    getImages: async (tvId, seasonNumber, episodeNumber) => {\n      return client.get<TVEpisodesGetImagesResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/images`, apiKey), accessToken);\n    },\n    getTranslations: async (tvId, seasonNumber, episodeNumber) => {\n      return client.get<TVEpisodesGetTranslationsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/translations`, apiKey), accessToken);\n    },\n    rateTVEpisode: async (tvId, seasonNumber, episodeNumber, params) => {\n      return client.post<TVEpisodesRateTVEpisodeResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`, apiKey, params), undefined, accessToken);\n    },\n    deleteRating: async (tvId, seasonNumber, episodeNumber, params) => {\n      return client.delete<TVEpisodesDeleteRatingResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/rating`, apiKey, params), undefined, accessToken);\n    },\n    getVideos: async (tvId, seasonNumber, episodeNumber, params) => {\n      return client.get<TVEpisodesGetVideosResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/episode/${episodeNumber}/videos`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI, TVSeasonsAppendToResponse } from \"..\";\nimport { TVSeasonsGetAccountStatesResponse } from \"../types/v3/tv-seasons/get-account-states\";\nimport { TVSeasonsGetAggregateCreditsResponse } from \"../types/v3/tv-seasons/get-aggregate-credits\";\nimport { TVSeasonsGetChangesResponse } from \"../types/v3/tv-seasons/get-changes\";\nimport { TVSeasonsGetCreditsResponse } from \"../types/v3/tv-seasons/get-credits\";\nimport { TVSeasonsGetDetailsParams, TVSeasonsGetDetailsResponse } from \"../types/v3/tv-seasons/get-details\";\nimport { TVSeasonsGetExternalIDsResponse } from \"../types/v3/tv-seasons/get-external-ids\";\nimport { TVSeasonsGetImagesResponse } from \"../types/v3/tv-seasons/get-images\";\nimport { TVSeasonsGetTranslationsResponse } from \"../types/v3/tv-seasons/get-translations\";\nimport { TVSeasonsGetVideosResponse } from \"../types/v3/tv-seasons/get-videos\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3TVSeasonsMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"tvSeasons\"] => {\n  return {\n    getDetails: async <T extends TVSeasonsAppendToResponse[]>(tvId: number, seasonNumber: number, params?: TVSeasonsGetDetailsParams<T>) => {\n      return client.get<TVSeasonsGetDetailsResponse<T>>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}`, apiKey, params), accessToken);\n    },\n    getAccountStates: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetAccountStatesResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/account_states`, apiKey, params), accessToken);\n    },\n    getAggregateCredits: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetAggregateCreditsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/aggregate_credits`, apiKey, params), accessToken);\n    },\n    getChanges: async (seasonId, params) => {\n      return client.get<TVSeasonsGetChangesResponse>(buildV3Url(`${url}tv/season/${seasonId}/changes`, apiKey, params), accessToken);\n    },\n    getCredits: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetCreditsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/credits`, apiKey, params), accessToken);\n    },\n    getExternalIds: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetExternalIDsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/external_ids`, apiKey, params), accessToken);\n    },\n    getImages: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetImagesResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/images`, apiKey, params), accessToken);\n    },\n    getTranslations: async (tvId, seasonNumber) => {\n      return client.get<TVSeasonsGetTranslationsResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/translations`, apiKey), accessToken);\n    },\n    getVideos: async (tvId, seasonNumber, params) => {\n      return client.get<TVSeasonsGetVideosResponse>(buildV3Url(`${url}tv/${tvId}/season/${seasonNumber}/videos`, apiKey, params), accessToken);\n    },\n  };\n};\n","import { Credentials, Http, ITMDBAPI } from \"..\";\nimport { WatchProvidersGetAvailableRegionsResponse } from \"../types/v3/watch-providers/get-available-regions\";\nimport { WatchProvidersGetMovieProvidersResponse } from \"../types/v3/watch-providers/get-movie-providers\";\nimport { WatchProvidersGetTVProvidersResponse } from \"../types/v3/watch-providers/get-tv-providers\";\nimport { buildV3Url } from \"../utils/api\";\n\nexport const createV3WatchProvidersMethods = (client: Http, url: string, { apiKey, accessToken }: Credentials): ITMDBAPI[\"v3\"][\"watchProviders\"] => {\n  return {\n    getAvailableRegions: async (params) => {\n      return client.get<WatchProvidersGetAvailableRegionsResponse>(buildV3Url(`${url}watch/providers/regions`, apiKey, params), accessToken);\n    },\n    getMovieProviders: async (params) => {\n      return client.get<WatchProvidersGetMovieProvidersResponse>(buildV3Url(`${url}watch/providers/movie`, apiKey, params), accessToken);\n    },\n    getTVProviders: async (params) => {\n      return client.get<WatchProvidersGetTVProvidersResponse>(buildV3Url(`${url}watch/providers/tv`, apiKey, params), accessToken);\n    },\n  };\n};\n","export const createV4Proxy = (methods: any, accessToken?: string) => {\n  return new Proxy(methods, {\n    get(target, prop, receiver) {\n      const origMethod = Reflect.get(target, prop, receiver);\n      if (typeof origMethod === \"function\") {\n        return (...args: any[]) => {\n          if (accessToken === undefined) {\n            throw new Error(\"Access token is required for the v4 API\");\n          }\n          return origMethod.apply(this, args);\n        };\n      } else {\n        return origMethod;\n      }\n    },\n  });\n};\n","import { Http, V4IAccount } from \"..\";\nimport { V4AccountGetFavoriteMoviesResponse } from \"../types/v4/account/get-favorite-movies\";\nimport { V4AccountGetFavoriteTVShowsResponse } from \"../types/v4/account/get-favorite-tvshows\";\nimport { V4AccountGetListsResponse } from \"../types/v4/account/get-lists\";\nimport { V4AccountGetMovieRecommendationsResponse } from \"../types/v4/account/get-movie-recommendations\";\nimport { V4AccountGetMovieWatchlistResponse } from \"../types/v4/account/get-movie-watchlist\";\nimport { V4AccountGetRatedMoviesResponse } from \"../types/v4/account/get-rated-movies\";\nimport { V4AccountGetRatedTVShowsResponse } from \"../types/v4/account/get-rated-tvshows\";\nimport { V4AccountGetTVShowRecommendationsResponse } from \"../types/v4/account/get-tvshow-recommendations\";\nimport { V4AccountGetTVShowWatchlistResponse } from \"../types/v4/account/get-tvshow-watchlist\";\nimport { buildV4Url } from \"../utils/api\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nexport const createV4AccountMethods = (client: Http, apiUrl: string, accessToken?: string): V4IAccount => {\n  const accountMethods: V4IAccount = {\n    getLists: async (accountId, params) => {\n      return client.get<V4AccountGetListsResponse>(buildV4Url(`${apiUrl}account/${accountId}/lists`, params), accessToken);\n    },\n    getFavoriteMovies: async (accountId, params) => {\n      return client.get<V4AccountGetFavoriteMoviesResponse>(buildV4Url(`${apiUrl}account/${accountId}/movie/favorites`, params), accessToken);\n    },\n    getFavoriteTVShows: async (accountId, params) => {\n      return client.get<V4AccountGetFavoriteTVShowsResponse>(buildV4Url(`${apiUrl}account/${accountId}/tv/favorites`, params), accessToken);\n    },\n    getMovieRecommendations: async (accountId, params) => {\n      return client.get<V4AccountGetMovieRecommendationsResponse>(buildV4Url(`${apiUrl}account/${accountId}/movie/recommendations`, params), accessToken);\n    },\n    getTVShowRecommendations: async (accountId, params) => {\n      return client.get<V4AccountGetTVShowRecommendationsResponse>(buildV4Url(`${apiUrl}account/${accountId}/tv/recommendations`, params), accessToken);\n    },\n    getMovieWatchlist: async (accountId, params) => {\n      return client.get<V4AccountGetMovieWatchlistResponse>(buildV4Url(`${apiUrl}account/${accountId}/movie/watchlist`, params), accessToken);\n    },\n    getTVShowWatchlist: async (accountId, params) => {\n      return client.get<V4AccountGetTVShowWatchlistResponse>(buildV4Url(`${apiUrl}account/${accountId}/tv/watchlist`, params), accessToken);\n    },\n    getRatedMovies: async (accountId, params) => {\n      return client.get<V4AccountGetRatedMoviesResponse>(buildV4Url(`${apiUrl}account/${accountId}/movie/rated`, params), accessToken);\n    },\n    getRatedTVShows: async (accountId, params) => {\n      return client.get<V4AccountGetRatedTVShowsResponse>(buildV4Url(`${apiUrl}account/${accountId}/tv/rated`, params), accessToken);\n    },\n  };\n\n  const accountMethodsProxy = createV4Proxy(accountMethods, accessToken);\n  return accountMethodsProxy;\n};\n","import { Http, V4IAuth } from \"..\";\nimport { V4AuthCreateAccessTokenResponse } from \"../types/v4/auth/create-access-token\";\nimport { V4AuthCreateRequestTokenResponse } from \"../types/v4/auth/create-request-token\";\nimport { V4AuthDeleteAccessTokenResponse } from \"../types/v4/auth/delete-access-token\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nexport const createV4AuthMethods = (client: Http, apiUrl: string, accessToken?: string): V4IAuth => {\n  const authMethods: V4IAuth = {\n    createRequestToken: async (body) => {\n      return client.post<V4AuthCreateRequestTokenResponse, typeof body>(`${apiUrl}auth/request_token`, body, accessToken);\n    },\n    createAccessToken: async (body) => {\n      return client.post<V4AuthCreateAccessTokenResponse, typeof body>(`${apiUrl}auth/access_token`, body, accessToken);\n    },\n    deleteAccessToken: async (body) => {\n      return client.delete<V4AuthDeleteAccessTokenResponse, typeof body>(`${apiUrl}auth/access_token`, body, accessToken);\n    },\n  };\n\n  const authMethodsProxy = createV4Proxy(authMethods, accessToken);\n  return authMethodsProxy;\n};\n","import { Http, V4IList } from \"..\";\nimport { V4ListAddItemsResponse } from \"../types/v4/list/add-items\";\nimport { V4ListCheckItemStatusResponse } from \"../types/v4/list/check-item-status\";\nimport { V4ListClearListResponse } from \"../types/v4/list/clear-list\";\nimport { V4ListCreateListResponse } from \"../types/v4/list/create-list\";\nimport { V4ListDeleteListResponse } from \"../types/v4/list/delete-list\";\nimport { V4ListGetListResponse } from \"../types/v4/list/get-list\";\nimport { V4ListRemoveItemsResponse } from \"../types/v4/list/remove-items\";\nimport { V4ListUpdateItemsResponse } from \"../types/v4/list/update-items\";\nimport { V4ListUpdateListResponse } from \"../types/v4/list/update-list\";\nimport { buildV4Url } from \"../utils/api\";\nimport { createV4Proxy } from \"../utils/v4proxy\";\n\nconst getListUrl = (url: string, listId?: string): string => {\n  let formattedUrl = url;\n\n  if (listId) {\n    formattedUrl = formattedUrl.replace(\"{list_id}\", listId.toString());\n  } else {\n    formattedUrl = formattedUrl.replace(\"/{list_id}\", \"\");\n  }\n\n  return formattedUrl;\n};\n\nexport const createV4ListMethods = (client: Http, apiUrl: string, accessToken?: string): V4IList => {\n  const listMethods: V4IList = {\n    getList: async (params, listId) => {\n      return client.get<V4ListGetListResponse>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId), params), accessToken);\n    },\n    createList: async (body) => {\n      return client.post<V4ListCreateListResponse, typeof body>(buildV4Url(`${apiUrl}list`), body, accessToken);\n    },\n    updateList: async (body, listId) => {\n      return client.put<V4ListUpdateListResponse, typeof body>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId)), body, accessToken);\n    },\n    clearList: async (listId) => {\n      return client.post<V4ListClearListResponse>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}/clear`, listId)), undefined, accessToken);\n    },\n    deleteList: async (listId) => {\n      return client.delete<V4ListDeleteListResponse>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}`, listId)), undefined, accessToken);\n    },\n    addItems: async (body, listId) => {\n      return client.post<V4ListAddItemsResponse, typeof body>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)), body, accessToken);\n    },\n    updateItems: async (body, listId) => {\n      return client.put<V4ListUpdateItemsResponse, typeof body>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)), body, accessToken);\n    },\n    removeItems: async (body, listId) => {\n      return client.delete<V4ListRemoveItemsResponse, typeof body>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}/items`, listId)), body, accessToken);\n    },\n    checkItemStatus: async (params, listId) => {\n      return client.get<V4ListCheckItemStatusResponse>(buildV4Url(getListUrl(`${apiUrl}list/{list_id}/item_status`, listId), params), accessToken);\n    },\n  };\n\n  const listMethodsProxy = createV4Proxy(listMethods, accessToken);\n  return listMethodsProxy;\n};\n","import { MoviesAppendToResponse, PeopleAppendToResponse, TVAppendToResponse, TVEpisodesAppendToResponse, TVSeasonsAppendToResponse } from \"./types/append-to-response\";\nimport {\n  AccountGetDetailsParams,\n  AccountGetDetailsResponse,\n  AccountGetCreatedListsParams,\n  AccountGetCreatedListsResponse,\n  AccountGetFavoriteMoviesParams,\n  AccountGetFavoriteMoviesResponse,\n  AccountGetFavoriteTVShowsParams,\n  AccountGetFavoriteTVShowsResponse,\n  AccountMarkAsFavoriteParams,\n  AccountMarkAsFavoriteBody,\n  AccountMarkAsFavoriteResponse,\n  AccountGetRatedMoviesParams,\n  AccountGetRatedMoviesResponse,\n  AccountGetRatedTVShowsParams,\n  AccountGetRatedTVShowsResponse,\n  AccountGetRatedTVEpisodesParams,\n  AccountGetRatedTVEpisodesResponse,\n  AccountGetMovieWatchlistParams,\n  AccountGetMovieWatchlistResponse,\n  AccountGetTVShowWatchlistParams,\n  AccountGetTVShowWatchlistResponse,\n  AccountAddToWatchlistParams,\n  AccountAddToWatchlistBody,\n  AccountAddToWatchlistResponse,\n  AuthenticationCreateGuestSessionResponse,\n  AuthenticationCreateRequestTokenResponse,\n  AuthenticationCreateSessionBody,\n  AuthenticationCreateSessionResponse,\n  AuthenticationCreateSessionWithLoginBody,\n  AuthenticationCreateSessionWithLoginResponse,\n  AuthenticationCreateSessionFromV4AccessTokenBody,\n  AuthenticationCreateSessionFromV4AccessTokenResponse,\n  AuthenticationDeleteSessionBody,\n  AuthenticationDeleteSessionResponse,\n  CertificationsGetMovieCertificationResponse,\n  CertificationsGetTVCertificationResponse,\n  ChangesGetMovieChangeListParams,\n  ChangesGetMovieChangeListResponse,\n  ChangesGetTVChangeListParams,\n  ChangesGetTVChangeListResponse,\n  ChangesGetPersonChangeListParams,\n  ChangesGetPersonChangeListResponse,\n  CollectionsGetDetailsParams,\n  CollectionsGetDetailsResponse,\n  CollectionsGetImagesParams,\n  CollectionsGetImagesResponse,\n  CollectionsGetTranslationsParams,\n  CollectionsGetTranslationsResponse,\n  CompaniesGetDetailsResponse,\n  CompaniesGetAlternativeNamesResponse,\n  CompaniesGetImagesResponse,\n  ConfigurationGetApiConfigurationResponse,\n  ConfigurationGetCountriesResponse,\n  ConfigurationGetJobsResponse,\n  ConfigurationGetLanguagesResponse,\n  ConfigurationGetPrimaryTranslationsResponse,\n  ConfigurationGetTimezonesResponse,\n  CreditsGetDetailsResponse,\n  DiscoverMovieDiscoverParams,\n  DiscoverMovieDiscoverResponse,\n  DiscoverTVDiscoverParams,\n  DiscoverTVDiscoverResponse,\n  FindFindByIdParams,\n  FindFindByIdResponse,\n  GenresGetMovieListParams,\n  GenresGetMovieListResponse,\n  GenresGetTVListParams,\n  GenresGetTVListResponse,\n  GuestSessionsGetRatedMoviesParams,\n  GuestSessionsGetRatedMoviesResponse,\n  GuestSessionsGetRatedTVShowsParams,\n  GuestSessionsGetRatedTVShowsResponse,\n  GuestSessionsGetRatedTVEpisodesParams,\n  GuestSessionsGetRatedTVEpisodesResponse,\n  KeywordsGetDetailsResponse,\n  KeywordsGetMoviesParams,\n  KeywordsGetMoviesResponse,\n  ListsGetDetailsParams,\n  ListsGetDetailsResponse,\n  ListsCheckItemStatusParams,\n  ListsCheckItemStatusResponse,\n  ListsCreateListBody,\n  ListsCreateListParams,\n  ListsCreateListResponse,\n  ListsAddMovieBody,\n  ListsAddMovieParams,\n  ListsAddMovieResponse,\n  ListsRemoveMovieBody,\n  ListsRemoveMovieParams,\n  ListsRemoveMovieResponse,\n  ListsClearListParams,\n  ListsClearListResponse,\n  ListsDeleteListParams,\n  ListsDeleteListResponse,\n  MoviesGetDetailsParams,\n  MoviesGetDetailsResponse,\n  MoviesGetAccountStatesParams,\n  MoviesGetAccountStatesResponse,\n  MoviesGetAlternativeTitlesParams,\n  MoviesGetAlternativeTitlesResponse,\n  MoviesGetChangesParams,\n  MoviesGetChangesResponse,\n  MoviesGetCreditsParams,\n  MoviesGetCreditsResponse,\n  MoviesGetExternalIdsResponse,\n  MoviesGetImagesParams,\n  MoviesGetImagesResponse,\n  MoviesGetKeywordsResponse,\n  MoviesGetListsParams,\n  MoviesGetListsResponse,\n  MoviesGetRecommendationsParams,\n  MoviesGetRecommendationsResponse,\n  MoviesGetReleaseDatesResponse,\n  MoviesGetReviewsParams,\n  MoviesGetReviewsResponse,\n  MoviesGetSimilarMoviesParams,\n  MoviesGetSimilarMoviesResponse,\n  MoviesGetTranslationsResponse,\n  MoviesGetVideosParams,\n  MoviesGetVideosResponse,\n  MoviesGetWatchProvidersResponse,\n  MoviesRateMovieBody,\n  MoviesRateMovieParams,\n  MoviesRateMovieResponse,\n  MoviesDeleteRatingParams,\n  MoviesDeleteRatingResponse,\n  MoviesGetLatestResponse,\n  MoviesGetNowPlayingParams,\n  MoviesGetNowPlayingResponse,\n  MoviesGetPopularParams,\n  MoviesGetPopularResponse,\n  MoviesGetTopRatedParams,\n  MoviesGetTopRatedResponse,\n  MoviesGetUpcomingParams,\n  MoviesGetUpcomingResponse,\n  NetworksGetDetailsResponse,\n  NetworksGetAlternativeNamesResponse,\n  NetworksGetImagesResponse,\n  TrendingGetTrendingResponse,\n  PeopleGetDetailsParams,\n  PeopleGetDetailsResponse,\n  PeopleGetChangesParams,\n  PeopleGetChangesResponse,\n  PeopleGetMovieCreditsParams,\n  PeopleGetMovieCreditsResponse,\n  PeopleGetTvCreditsParams,\n  PeopleGetTvCreditsResponse,\n  PeopleGetCombinedCreditsParams,\n  PeopleGetCombinedCreditsResponse,\n  PeopleGetExternalIdsResponse,\n  PeopleGetImagesResponse,\n  PeopleGetTaggedImagesParams,\n  PeopleGetTaggedImagesResponse,\n  PeopleGetTranslationsParams,\n  PeopleGetTranslationsResponse,\n  PeopleGetLatestParams,\n  PeopleGetLatestResponse,\n  PeopleGetPopularParams,\n  PeopleGetPopularResponse,\n  ReviewsGetDetailsResponse,\n  SearchCompaniesParams,\n  SearchCompaniesResponse,\n  SearchCollectionsParams,\n  SearchCollectionsResponse,\n  SearchKeywordsParams,\n  SearchKeywordsResponse,\n  SearchMoviesParams,\n  SearchMoviesResponse,\n  SearchMultiSearchParams,\n  SearchMultiSearchResponse,\n  SearchPeopleParams,\n  SearchPeopleResponse,\n  SearchTVShowsParams,\n  SearchTVShowsResponse,\n  TVGetDetailsParams,\n  TVGetDetailsResponse,\n  TVGetAccountStatesParams,\n  TVGetAccountStatesResponse,\n  TVGetAggregateCreditsParams,\n  TVGetAggregateCreditsResponse,\n  TVGetAlternativeTitlesParams,\n  TVGetAlternativeTitlesResponse,\n  TVGetChangesParams,\n  TVGetChangesResponse,\n  TVGetContentRatingsParams,\n  TVGetContentRatingsResponse,\n  TVGetCreditsParams,\n  TVGetCreditsResponse,\n  TVGetEpisodeGroupsParams,\n  TVGetEpisodeGroupsResponse,\n  TVGetExternalIdsParams,\n  TVGetExternalIdsResponse,\n  TVGetImagesParams,\n  TVGetImagesResponse,\n  TVGetKeywordsResponse,\n  TVGetRecommendationsParams,\n  TVGetRecommendationsResponse,\n  TVGetReviewsParams,\n  TVGetReviewsResponse,\n  TVGetScreenedTheatricallyParams,\n  TVGetScreenedTheatricallyResponse,\n  TVGetSimilarTVShowsParams,\n  TVGetSimilarTVShowsResponse,\n  TVGetTranslationsResponse,\n  TVGetVideosParams,\n  TVGetVideosResponse,\n  TVGetWatchProvidersResponse,\n  TVRateTVShowsBody,\n  TVRateTVShowsParams,\n  TVRateTVShowsResponse,\n  TVDeleteRatingParams,\n  TVEpisodesDeleteRatingResponse,\n  TVGetLatestParams,\n  TVGetLatestResponse,\n  TVGetTVAiringTodayParams,\n  TVGetTVAiringTodayResponse,\n  TVGetTVOnTheAirParams,\n  TVGetTVOnTheAirResponse,\n  TVGetPopularParams,\n  TVGetPopularResponse,\n  TVGetTopRatedParams,\n  TVGetTopRatedResponse,\n  TVSeasonsGetDetailsParams,\n  TVSeasonsGetDetailsResponse,\n  TVSeasonsGetAccountStatesParams,\n  TVSeasonsGetAccountStatesResponse,\n  TVSeasonsGetAggregateCreditsParams,\n  TVSeasonsGetAggregateCreditsResponse,\n  TVSeasonsGetChangesParams,\n  TVSeasonsGetChangesResponse,\n  TVSeasonsGetCreditsParams,\n  TVSeasonsGetCreditsResponse,\n  TVSeasonsGetExternalIDsParams,\n  TVSeasonsGetExternalIDsResponse,\n  TVSeasonsGetImagesParams,\n  TVSeasonsGetImagesResponse,\n  TVSeasonsGetTranslationsResponse,\n  TVSeasonsGetVideosParams,\n  TVSeasonsGetVideosResponse,\n  TVEpisodesGetDetailsParams,\n  TVEpisodesGetDetailsResponse,\n  TVEpisodesGetAccountStatesParams,\n  TVEpisodesGetAccountStatesResponse,\n  TVEpisodesGetChangesParams,\n  TVEpisodesGetChangesResponse,\n  TVEpisodesGetCreditsParams,\n  TVEpisodesGetCreditsResponse,\n  TVEpisodesGetExternalIDsResponse,\n  TVEpisodesGetImagesResponse,\n  TVEpisodesGetTranslationsResponse,\n  TVEpisodesRateTVEpisodeBody,\n  TVEpisodesRateTVEpisodeParams,\n  TVEpisodesRateTVEpisodeResponse,\n  TVEpisodesDeleteRatingParams,\n  TVEpisodesGetVideosParams,\n  TVEpisodesGetVideosResponse,\n  TVEpisodeGroupsGetDetailsParams,\n  TVEpisodeGroupsGetDetailsResponse,\n  WatchProvidersGetAvailableRegionsParams,\n  WatchProvidersGetAvailableRegionsResponse,\n  WatchProvidersGetMovieProvidersParams,\n  WatchProvidersGetMovieProvidersResponse,\n  WatchProvidersGetTVProvidersParams,\n  WatchProvidersGetTVProvidersResponse,\n  TrendingGetTrendingParams,\n} from \"./types/v3\";\nimport {\n  V4AccountGetListsParams,\n  V4AccountGetListsResponse,\n  V4AccountGetFavoriteMoviesParams,\n  V4AccountGetFavoriteMoviesResponse,\n  V4AccountGetFavoriteTVShowsParams,\n  V4AccountGetFavoriteTVShowsResponse,\n  V4AccountGetMovieRecommendationsParams,\n  V4AccountGetMovieRecommendationsResponse,\n  V4AccountGetTVShowRecommendationsParams,\n  V4AccountGetTVShowRecommendationsResponse,\n  V4AccountGetMovieWatchlistParams,\n  V4AccountGetMovieWatchlistResponse,\n  V4AccountGetTVShowWatchlistParams,\n  V4AccountGetTVShowWatchlistResponse,\n  V4AccountGetRatedMoviesParams,\n  V4AccountGetRatedMoviesResponse,\n  V4AccountGetRatedTVShowsParams,\n  V4AccountGetRatedTVShowsResponse,\n  V4AuthCreateRequestTokenBody,\n  V4AuthCreateRequestTokenResponse,\n  V4AuthCreateAccessTokenBody,\n  V4AuthCreateAccessTokenResponse,\n  V4AuthDeleteAccessTokenBody,\n  V4AuthDeleteAccessTokenResponse,\n  V4ListGetListParams,\n  V4ListGetListResponse,\n  V4ListCreateListBody,\n  V4ListCreateListResponse,\n  V4ListUpdateListBody,\n  V4ListUpdateListResponse,\n  V4ListClearListResponse,\n  V4ListDeleteListResponse,\n  V4ListAddItemsBody,\n  V4ListAddItemsResponse,\n  V4ListUpdateItemsBody,\n  V4ListUpdateItemsResponse,\n  V4ListRemoveItemsBody,\n  V4ListRemoveItemsResponse,\n  V4ListCheckItemStatusParams,\n  V4ListCheckItemStatusResponse,\n} from \"./types/v4\";\nimport { createV3AccountMethods } from \"./v3/account\";\nimport { createV3AuthenticationMethods } from \"./v3/authentication\";\nimport { createV3CertificationsMethods } from \"./v3/certifications\";\nimport { createV3ChangesMethods } from \"./v3/changes\";\nimport { createV3CollectionsMethods } from \"./v3/collections\";\nimport { createV3CompaniesMethods } from \"./v3/companies\";\nimport { createV3ConfigurationMethods } from \"./v3/configuration\";\nimport { createV3CreditsMethods } from \"./v3/credits\";\nimport { createV3DiscoverMethods } from \"./v3/discover\";\nimport { createV3FindMethods } from \"./v3/find\";\nimport { createV3GenresMethods } from \"./v3/genres\";\nimport { createV3GuestSessionsMethods } from \"./v3/guest-sessions\";\nimport { createV3KeywordsMethods } from \"./v3/keywords\";\nimport { createV3ListsMethods } from \"./v3/lists\";\nimport { createV3MoviesMethods } from \"./v3/movies\";\nimport { createV3NetworksMethods } from \"./v3/networks\";\nimport { createV3PeopleMethods } from \"./v3/people\";\nimport { createV3ReviewsMethods } from \"./v3/reviews\";\nimport { createV3SearchMethods } from \"./v3/search\";\nimport { createV3TrendingMethods } from \"./v3/trending\";\nimport { createV3TvMethods } from \"./v3/tv\";\nimport { createV3TVEpisodeGroupsMethods } from \"./v3/tv-episode-groups\";\nimport { createV3TVEpisodesMethods } from \"./v3/tv-episodes\";\nimport { createV3TVSeasonsMethods } from \"./v3/tv-seasons\";\nimport { createV3WatchProvidersMethods } from \"./v3/watch-providers\";\nimport { createV4AccountMethods } from \"./v4/account\";\nimport { createV4AuthMethods } from \"./v4/auth\";\nimport { createV4ListMethods } from \"./v4/list\";\n\ninterface IAccount {\n  getDetails: (params: AccountGetDetailsParams) => Promise<AccountGetDetailsResponse>;\n  getCreatedLists: (params: AccountGetCreatedListsParams, accountId?: number) => Promise<AccountGetCreatedListsResponse>;\n  getFavoriteMovies: (params: AccountGetFavoriteMoviesParams, accountId?: number) => Promise<AccountGetFavoriteMoviesResponse>;\n  getFavoriteTVShows: (params: AccountGetFavoriteTVShowsParams, accountId?: number) => Promise<AccountGetFavoriteTVShowsResponse>;\n  markAsFavorite: (params: AccountMarkAsFavoriteParams, body: AccountMarkAsFavoriteBody, accountId?: number) => Promise<AccountMarkAsFavoriteResponse>;\n  getRatedMovies: (params: AccountGetRatedMoviesParams, accountId?: number) => Promise<AccountGetRatedMoviesResponse>;\n  getRatedTVShows: (params: AccountGetRatedTVShowsParams, accountId?: number) => Promise<AccountGetRatedTVShowsResponse>;\n  getRatedTVEpisodes: (params: AccountGetRatedTVEpisodesParams, accountId?: number) => Promise<AccountGetRatedTVEpisodesResponse>;\n  getMovieWatchlist: (params: AccountGetMovieWatchlistParams, accountId?: number) => Promise<AccountGetMovieWatchlistResponse>;\n  getTVShowWatchlist: (params: AccountGetTVShowWatchlistParams, accountId?: number) => Promise<AccountGetTVShowWatchlistResponse>;\n  addToWatchlist: (params: AccountAddToWatchlistParams, body: AccountAddToWatchlistBody, accountId?: number) => Promise<AccountAddToWatchlistResponse>;\n}\n\ninterface IAuthentication {\n  createGuestSession: () => Promise<AuthenticationCreateGuestSessionResponse>;\n  createRequestToken: () => Promise<AuthenticationCreateRequestTokenResponse>;\n  createSession: (body: AuthenticationCreateSessionBody) => Promise<AuthenticationCreateSessionResponse>;\n  createSessionWithLogin: (body: AuthenticationCreateSessionWithLoginBody) => Promise<AuthenticationCreateSessionWithLoginResponse>;\n  createSessionFromV4AccessToken: (body: AuthenticationCreateSessionFromV4AccessTokenBody) => Promise<AuthenticationCreateSessionFromV4AccessTokenResponse>;\n  deleteSession: (body: AuthenticationDeleteSessionBody) => Promise<AuthenticationDeleteSessionResponse>;\n}\n\ninterface ICertifications {\n  getMovieCertifications: () => Promise<CertificationsGetMovieCertificationResponse>;\n  getTVShowCertifications: () => Promise<CertificationsGetTVCertificationResponse>;\n}\n\ninterface IChanges {\n  getMovieChangeList: (params?: ChangesGetMovieChangeListParams) => Promise<ChangesGetMovieChangeListResponse>;\n  getTVChangeList: (params?: ChangesGetTVChangeListParams) => Promise<ChangesGetTVChangeListResponse>;\n  getPersonChangeList: (params?: ChangesGetPersonChangeListParams) => Promise<ChangesGetPersonChangeListResponse>;\n}\n\ninterface ICollections {\n  getDetails: (collectionId: number, params?: CollectionsGetDetailsParams) => Promise<CollectionsGetDetailsResponse>;\n  getImages: (collectionId: number, params?: CollectionsGetImagesParams) => Promise<CollectionsGetImagesResponse>;\n  getTranslations: (collectionId: number, params?: CollectionsGetTranslationsParams) => Promise<CollectionsGetTranslationsResponse>;\n}\n\ninterface ICompanies {\n  getDetails: (companyId: number) => Promise<CompaniesGetDetailsResponse>;\n  getAlternativeNames: (companyId: number) => Promise<CompaniesGetAlternativeNamesResponse>;\n  getImages: (companyId: number) => Promise<CompaniesGetImagesResponse>;\n}\n\ninterface IConfiguration {\n  getAPIConfiguration: () => Promise<ConfigurationGetApiConfigurationResponse>;\n  getCountries: () => Promise<ConfigurationGetCountriesResponse>;\n  getJobs: () => Promise<ConfigurationGetJobsResponse>;\n  getLanguages: () => Promise<ConfigurationGetLanguagesResponse>;\n  getPrimaryTranslations: () => Promise<ConfigurationGetPrimaryTranslationsResponse>;\n  getTimezones: () => Promise<ConfigurationGetTimezonesResponse>;\n}\n\ninterface ICredits {\n  getDetails: (creditId: string) => Promise<CreditsGetDetailsResponse>;\n}\n\ninterface IDiscover {\n  movieDiscover: (params?: DiscoverMovieDiscoverParams) => Promise<DiscoverMovieDiscoverResponse>;\n  tvDiscover: (params?: DiscoverTVDiscoverParams) => Promise<DiscoverTVDiscoverResponse>;\n}\n\ninterface IFind {\n  findById: (externalId: string, params: FindFindByIdParams) => Promise<FindFindByIdResponse>;\n}\n\ninterface IGenres {\n  getMovieList: (params?: GenresGetMovieListParams) => Promise<GenresGetMovieListResponse>;\n  getTVList: (params?: GenresGetTVListParams) => Promise<GenresGetTVListResponse>;\n}\n\ninterface IGuestSessions {\n  getRatedMovies: (guestSessionId: string, params?: GuestSessionsGetRatedMoviesParams) => Promise<GuestSessionsGetRatedMoviesResponse>;\n  getRatedTVShows: (guestSessionId: string, params?: GuestSessionsGetRatedTVShowsParams) => Promise<GuestSessionsGetRatedTVShowsResponse>;\n  getRatedTVEpisodes: (guestSessionId: string, params?: GuestSessionsGetRatedTVEpisodesParams) => Promise<GuestSessionsGetRatedTVEpisodesResponse>;\n}\n\ninterface IKeywords {\n  getDetails: (keywordId: number) => Promise<KeywordsGetDetailsResponse>;\n  getMovies: (keywordId: number, params?: KeywordsGetMoviesParams) => Promise<KeywordsGetMoviesResponse>;\n}\n\ninterface ILists {\n  getDetails: (listId: string, params?: ListsGetDetailsParams) => Promise<ListsGetDetailsResponse>;\n  checkItemStatus: (listId: string, params: ListsCheckItemStatusParams) => Promise<ListsCheckItemStatusResponse>;\n  createList: (body: ListsCreateListBody, params: ListsCreateListParams) => Promise<ListsCreateListResponse>;\n  addMovie: (listId: string, body: ListsAddMovieBody, params: ListsAddMovieParams) => Promise<ListsAddMovieResponse>;\n  removeMovie: (listId: string, body: ListsRemoveMovieBody, params: ListsRemoveMovieParams) => Promise<ListsRemoveMovieResponse>;\n  clearList: (listId: string, params: ListsClearListParams) => Promise<ListsClearListResponse>;\n  deleteList: (listId: string, params: ListsDeleteListParams) => Promise<ListsDeleteListResponse>;\n}\n\ninterface IMovies {\n  getDetails: <T extends MoviesAppendToResponse[]>(movieId: number, params?: MoviesGetDetailsParams<T>) => Promise<MoviesGetDetailsResponse<T>>;\n  getAccountStates: (movieId: number, params: MoviesGetAccountStatesParams) => Promise<MoviesGetAccountStatesResponse>;\n  getAlternativeTitles: (movieId: number, params?: MoviesGetAlternativeTitlesParams) => Promise<MoviesGetAlternativeTitlesResponse>;\n  getChanges: (movieId: number, params?: MoviesGetChangesParams) => Promise<MoviesGetChangesResponse>;\n  getCredits: (movieId: number, params?: MoviesGetCreditsParams) => Promise<MoviesGetCreditsResponse>;\n  getExternalIds: (movieId: number) => Promise<MoviesGetExternalIdsResponse>;\n  getImages: (movieId: number, params?: MoviesGetImagesParams) => Promise<MoviesGetImagesResponse>;\n  getKeywords: (movieId: number) => Promise<MoviesGetKeywordsResponse>;\n  getLists: (movieId: number, params?: MoviesGetListsParams) => Promise<MoviesGetListsResponse>;\n  getRecommendations: (movieId: number, params?: MoviesGetRecommendationsParams) => Promise<MoviesGetRecommendationsResponse>;\n  getReleaseDates: (movieId: number) => Promise<MoviesGetReleaseDatesResponse>;\n  getReviews: (movieId: number, params?: MoviesGetReviewsParams) => Promise<MoviesGetReviewsResponse>;\n  getSimilarMovies: (movieId: number, params?: MoviesGetSimilarMoviesParams) => Promise<MoviesGetSimilarMoviesResponse>;\n  getTranslations: (movieId: number) => Promise<MoviesGetTranslationsResponse>;\n  getVideos: (movieId: number, params?: MoviesGetVideosParams) => Promise<MoviesGetVideosResponse>;\n  getWatchProviders: (movieId: number) => Promise<MoviesGetWatchProvidersResponse>;\n  rateMovie: (movieId: number, body: MoviesRateMovieBody, params?: MoviesRateMovieParams) => Promise<MoviesRateMovieResponse>;\n  deleteRating: (movieId: number, params?: MoviesDeleteRatingParams) => Promise<MoviesDeleteRatingResponse>;\n  getLatest: () => Promise<MoviesGetLatestResponse>;\n  getNowPlaying: (params?: MoviesGetNowPlayingParams) => Promise<MoviesGetNowPlayingResponse>;\n  getPopular: (params?: MoviesGetPopularParams) => Promise<MoviesGetPopularResponse>;\n  getTopRated: (params?: MoviesGetTopRatedParams) => Promise<MoviesGetTopRatedResponse>;\n  getUpcoming: (params?: MoviesGetUpcomingParams) => Promise<MoviesGetUpcomingResponse>;\n}\n\ninterface INetworks {\n  getDetails: (networkId: number) => Promise<NetworksGetDetailsResponse>;\n  getAlternativeNames: (networkId: number) => Promise<NetworksGetAlternativeNamesResponse>;\n  getImages: (networkId: number) => Promise<NetworksGetImagesResponse>;\n}\n\ninterface ITrending {\n  getTrending: (\n    mediaType: TrendingGetTrendingParams[\"media_type\"],\n    timeWindow: TrendingGetTrendingParams[\"time_window\"],\n    language?: TrendingGetTrendingParams[\"language\"],\n  ) => Promise<TrendingGetTrendingResponse>;\n}\n\ninterface IPeople {\n  getDetails: <T extends PeopleAppendToResponse[]>(personId: number, params?: PeopleGetDetailsParams<T>) => Promise<PeopleGetDetailsResponse<T>>;\n  getChanges: (personId: number, params?: PeopleGetChangesParams) => Promise<PeopleGetChangesResponse>;\n  getMovieCredits: (personId: number, params?: PeopleGetMovieCreditsParams) => Promise<PeopleGetMovieCreditsResponse>;\n  getTVCredits: (personId: number, params?: PeopleGetTvCreditsParams) => Promise<PeopleGetTvCreditsResponse>;\n  getCombinedCredits: (personId: number, params?: PeopleGetCombinedCreditsParams) => Promise<PeopleGetCombinedCreditsResponse>;\n  getExternalIds: (personId: number) => Promise<PeopleGetExternalIdsResponse>;\n  getImages: (personId: number) => Promise<PeopleGetImagesResponse>;\n  getTaggedImages: (personId: number, params?: PeopleGetTaggedImagesParams) => Promise<PeopleGetTaggedImagesResponse>;\n  getTranslations: (personId: number, params?: PeopleGetTranslationsParams) => Promise<PeopleGetTranslationsResponse>;\n  getLatest: (params?: PeopleGetLatestParams) => Promise<PeopleGetLatestResponse>;\n  getPopular: (params?: PeopleGetPopularParams) => Promise<PeopleGetPopularResponse>;\n}\n\ninterface IReviews {\n  getDetails: (reviewId: string) => Promise<ReviewsGetDetailsResponse>;\n}\n\ninterface ISearch {\n  searchCompanies: (params: SearchCompaniesParams) => Promise<SearchCompaniesResponse>;\n  searchCollections: (params: SearchCollectionsParams) => Promise<SearchCollectionsResponse>;\n  searchKeywords: (params: SearchKeywordsParams) => Promise<SearchKeywordsResponse>;\n  searchMovies: (params: SearchMoviesParams) => Promise<SearchMoviesResponse>;\n  searchMulti: (params: SearchMultiSearchParams) => Promise<SearchMultiSearchResponse>;\n  searchPeople: (params: SearchPeopleParams) => Promise<SearchPeopleResponse>;\n  searchTV: (params: SearchTVShowsParams) => Promise<SearchTVShowsResponse>;\n}\n\ninterface ITV {\n  getDetails: <T extends TVAppendToResponse[]>(tvId: number, params?: TVGetDetailsParams<T>) => Promise<TVGetDetailsResponse<T>>;\n  getAccountStates: (tvId: number, params?: TVGetAccountStatesParams) => Promise<TVGetAccountStatesResponse>;\n  getAggregateCredits: (tvId: number, params?: TVGetAggregateCreditsParams) => Promise<TVGetAggregateCreditsResponse>;\n  getAlternativeTitles: (tvId: number, params?: TVGetAlternativeTitlesParams) => Promise<TVGetAlternativeTitlesResponse>;\n  getChanges: (tvId: number, params?: TVGetChangesParams) => Promise<TVGetChangesResponse>;\n  getContentRatings: (tvId: number, params?: TVGetContentRatingsParams) => Promise<TVGetContentRatingsResponse>;\n  getCredits: (tvId: number, params?: TVGetCreditsParams) => Promise<TVGetCreditsResponse>;\n  getEpisodeGroups: (tvId: number, params?: TVGetEpisodeGroupsParams) => Promise<TVGetEpisodeGroupsResponse>;\n  getExternalIds: (tvId: number, params?: TVGetExternalIdsParams) => Promise<TVGetExternalIdsResponse>;\n  getImages: (tvId: number, params?: TVGetImagesParams) => Promise<TVGetImagesResponse>;\n  getKeywords: (tvId: number) => Promise<TVGetKeywordsResponse>;\n  getRecommendations: (tvId: number, params?: TVGetRecommendationsParams) => Promise<TVGetRecommendationsResponse>;\n  getReviews: (tvId: number, params?: TVGetReviewsParams) => Promise<TVGetReviewsResponse>;\n  getScreenedTheatrically: (tvId: number, params?: TVGetScreenedTheatricallyParams) => Promise<TVGetScreenedTheatricallyResponse>;\n  getSimilarTVShows: (tvId: number, params?: TVGetSimilarTVShowsParams) => Promise<TVGetSimilarTVShowsResponse>;\n  getTranslations: (tvId: number) => Promise<TVGetTranslationsResponse>;\n  getVideos: (tvId: number, params?: TVGetVideosParams) => Promise<TVGetVideosResponse>;\n  getWatchProviders: (tvId: number) => Promise<TVGetWatchProvidersResponse>;\n  rateTVShow: (tvId: number, body: TVRateTVShowsBody, params?: TVRateTVShowsParams) => Promise<TVRateTVShowsResponse>;\n  deleteRating: (tvId: number, params?: TVDeleteRatingParams) => Promise<TVEpisodesDeleteRatingResponse>;\n  getLatest: (params?: TVGetLatestParams) => Promise<TVGetLatestResponse>;\n  getTVAiringToday: (params?: TVGetTVAiringTodayParams) => Promise<TVGetTVAiringTodayResponse>;\n  getTVOnTheAir: (params?: TVGetTVOnTheAirParams) => Promise<TVGetTVOnTheAirResponse>;\n  getPopular: (params?: TVGetPopularParams) => Promise<TVGetPopularResponse>;\n  getTopRated: (params?: TVGetTopRatedParams) => Promise<TVGetTopRatedResponse>;\n}\n\ninterface ITVSeasons {\n  getDetails: <T extends TVSeasonsAppendToResponse[]>(tvId: number, seasonNumber: number, params?: TVSeasonsGetDetailsParams<T>) => Promise<TVSeasonsGetDetailsResponse<T>>;\n  getAccountStates: (tvId: number, seasonNumber: number, params?: TVSeasonsGetAccountStatesParams) => Promise<TVSeasonsGetAccountStatesResponse>;\n  getAggregateCredits: (tvId: number, seasonNumber: number, params?: TVSeasonsGetAggregateCreditsParams) => Promise<TVSeasonsGetAggregateCreditsResponse>;\n  getChanges: (tvId: number, seasonNumber: number, params?: TVSeasonsGetChangesParams) => Promise<TVSeasonsGetChangesResponse>;\n  getCredits: (tvId: number, seasonNumber: number, params?: TVSeasonsGetCreditsParams) => Promise<TVSeasonsGetCreditsResponse>;\n  getExternalIds: (tvId: number, seasonNumber: number, params?: TVSeasonsGetExternalIDsParams) => Promise<TVSeasonsGetExternalIDsResponse>;\n  getImages: (tvId: number, seasonNumber: number, params?: TVSeasonsGetImagesParams) => Promise<TVSeasonsGetImagesResponse>;\n  getTranslations: (tvId: number, seasonNumber: number) => Promise<TVSeasonsGetTranslationsResponse>;\n  getVideos: (tvId: number, seasonNumber: number, params?: TVSeasonsGetVideosParams) => Promise<TVSeasonsGetVideosResponse>;\n}\n\ninterface ITVEpisodes {\n  getDetails: <T extends TVEpisodesAppendToResponse[]>(tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetDetailsParams<T>) => Promise<TVEpisodesGetDetailsResponse<T>>;\n  getAccountStates: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetAccountStatesParams) => Promise<TVEpisodesGetAccountStatesResponse>;\n  getChanges: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetChangesParams) => Promise<TVEpisodesGetChangesResponse>;\n  getCredits: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetCreditsParams) => Promise<TVEpisodesGetCreditsResponse>;\n  getExternalIds: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetExternalIDsResponse>;\n  getImages: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetImagesResponse>;\n  getTranslations: (tvId: number, seasonNumber: number, episodeNumber: number) => Promise<TVEpisodesGetTranslationsResponse>;\n  rateTVEpisode: (tvId: number, seasonNumber: number, episodeNumber: number, body: TVEpisodesRateTVEpisodeBody, params?: TVEpisodesRateTVEpisodeParams) => Promise<TVEpisodesRateTVEpisodeResponse>;\n  deleteRating: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesDeleteRatingParams) => Promise<TVEpisodesDeleteRatingResponse>;\n  getVideos: (tvId: number, seasonNumber: number, episodeNumber: number, params?: TVEpisodesGetVideosParams) => Promise<TVEpisodesGetVideosResponse>;\n}\n\ninterface ITVEpisodeGroups {\n  getDetails: (id?: string, params?: TVEpisodeGroupsGetDetailsParams) => Promise<TVEpisodeGroupsGetDetailsResponse>;\n}\n\ninterface IWatchProviders {\n  getAvailableRegions: (params?: WatchProvidersGetAvailableRegionsParams) => Promise<WatchProvidersGetAvailableRegionsResponse>;\n  getMovieProviders: (params?: WatchProvidersGetMovieProvidersParams) => Promise<WatchProvidersGetMovieProvidersResponse>;\n  getTVProviders: (params?: WatchProvidersGetTVProvidersParams) => Promise<WatchProvidersGetTVProvidersResponse>;\n}\n\nexport interface V4IAccount {\n  getLists: (accountId: string, params?: V4AccountGetListsParams) => Promise<V4AccountGetListsResponse>;\n  getFavoriteMovies: (accountId: string, params?: V4AccountGetFavoriteMoviesParams) => Promise<V4AccountGetFavoriteMoviesResponse>;\n  getFavoriteTVShows: (accountId: string, params?: V4AccountGetFavoriteTVShowsParams) => Promise<V4AccountGetFavoriteTVShowsResponse>;\n  getMovieRecommendations: (accountId: string, params?: V4AccountGetMovieRecommendationsParams) => Promise<V4AccountGetMovieRecommendationsResponse>;\n  getTVShowRecommendations: (accountId: string, params?: V4AccountGetTVShowRecommendationsParams) => Promise<V4AccountGetTVShowRecommendationsResponse>;\n  getMovieWatchlist: (accountId: string, params?: V4AccountGetMovieWatchlistParams) => Promise<V4AccountGetMovieWatchlistResponse>;\n  getTVShowWatchlist: (accountId: string, params?: V4AccountGetTVShowWatchlistParams) => Promise<V4AccountGetTVShowWatchlistResponse>;\n  getRatedMovies: (accountId: string, params?: V4AccountGetRatedMoviesParams) => Promise<V4AccountGetRatedMoviesResponse>;\n  getRatedTVShows: (accountId: string, params?: V4AccountGetRatedTVShowsParams) => Promise<V4AccountGetRatedTVShowsResponse>;\n}\n\nexport interface V4IAuth {\n  createRequestToken: (body?: V4AuthCreateRequestTokenBody) => Promise<V4AuthCreateRequestTokenResponse>;\n  createAccessToken: (body: V4AuthCreateAccessTokenBody) => Promise<V4AuthCreateAccessTokenResponse>;\n  deleteAccessToken: (body: V4AuthDeleteAccessTokenBody) => Promise<V4AuthDeleteAccessTokenResponse>;\n}\n\nexport interface V4IList {\n  getList: (params?: V4ListGetListParams, listId?: string) => Promise<V4ListGetListResponse>;\n  createList: (body: V4ListCreateListBody) => Promise<V4ListCreateListResponse>;\n  updateList: (body: V4ListUpdateListBody, listId?: string) => Promise<V4ListUpdateListResponse>;\n  clearList: (listId?: string) => Promise<V4ListClearListResponse>;\n  deleteList: (listId?: string) => Promise<V4ListDeleteListResponse>;\n  addItems: (body: V4ListAddItemsBody, listId?: string) => Promise<V4ListAddItemsResponse>;\n  updateItems: (body: V4ListUpdateItemsBody, listId?: string) => Promise<V4ListUpdateItemsResponse>;\n  removeItems: (body: V4ListRemoveItemsBody, listId?: string) => Promise<V4ListRemoveItemsResponse>;\n  checkItemStatus: (params: V4ListCheckItemStatusParams, listId?: string) => Promise<V4ListCheckItemStatusResponse>;\n}\n\nexport interface ITMDBAPI {\n  v3: {\n    account: IAccount;\n    authentication: IAuthentication;\n    certifications: ICertifications;\n    changes: IChanges;\n    collections: ICollections;\n    companies: ICompanies;\n    configuration: IConfiguration;\n    credits: ICredits;\n    discover: IDiscover;\n    find: IFind;\n    genres: IGenres;\n    guestSessions: IGuestSessions;\n    keywords: IKeywords;\n    lists: ILists;\n    movies: IMovies;\n    networks: INetworks;\n    trending: ITrending;\n    people: IPeople;\n    reviews: IReviews;\n    search: ISearch;\n    tv: ITV;\n    tvSeasons: ITVSeasons;\n    tvEpisodes: ITVEpisodes;\n    tvEpisodeGroups: ITVEpisodeGroups;\n    watchProviders: IWatchProviders;\n  };\n  v4: {\n    account: V4IAccount;\n    auth: V4IAuth;\n    list: V4IList;\n  };\n}\n\nexport interface Credentials {\n  apiKey?: string;\n  accessToken?: string;\n}\n\nexport interface Http {\n  get<TResponse>(url: string, accessToken?: string): Promise<TResponse>;\n\n  post<TResponse, TBody = undefined>(url: string, body?: TBody, accessToken?: string): Promise<TResponse>;\n\n  put<TResponse, TBody>(url: string, body: TBody, accessToken?: string): Promise<TResponse>;\n\n  delete<TResponse, TBody = undefined>(url: string, body?: TBody, accessToken?: string): Promise<TResponse>;\n}\n\nconst createV3Methods = (client: Http, v3Url: string, credentials: Credentials) => {\n  return {\n    account: createV3AccountMethods(client, v3Url, credentials),\n    authentication: createV3AuthenticationMethods(client, v3Url, credentials),\n    certifications: createV3CertificationsMethods(client, v3Url, credentials),\n    changes: createV3ChangesMethods(client, v3Url, credentials),\n    collections: createV3CollectionsMethods(client, v3Url, credentials),\n    companies: createV3CompaniesMethods(client, v3Url, credentials),\n    configuration: createV3ConfigurationMethods(client, v3Url, credentials),\n    credits: createV3CreditsMethods(client, v3Url, credentials),\n    discover: createV3DiscoverMethods(client, v3Url, credentials),\n    find: createV3FindMethods(client, v3Url, credentials),\n    genres: createV3GenresMethods(client, v3Url, credentials),\n    guestSessions: createV3GuestSessionsMethods(client, v3Url, credentials),\n    keywords: createV3KeywordsMethods(client, v3Url, credentials),\n    lists: createV3ListsMethods(client, v3Url, credentials),\n    movies: createV3MoviesMethods(client, v3Url, credentials),\n    networks: createV3NetworksMethods(client, v3Url, credentials),\n    trending: createV3TrendingMethods(client, v3Url, credentials),\n    people: createV3PeopleMethods(client, v3Url, credentials),\n    reviews: createV3ReviewsMethods(client, v3Url, credentials),\n    search: createV3SearchMethods(client, v3Url, credentials),\n    tv: createV3TvMethods(client, v3Url, credentials),\n    tvSeasons: createV3TVSeasonsMethods(client, v3Url, credentials),\n    tvEpisodes: createV3TVEpisodesMethods(client, v3Url, credentials),\n    tvEpisodeGroups: createV3TVEpisodeGroupsMethods(client, v3Url, credentials),\n    watchProviders: createV3WatchProvidersMethods(client, v3Url, credentials),\n  };\n};\n\nconst createV4Methods = (client: Http, v4Url: string, accessToken?: string) => {\n  return {\n    account: createV4AccountMethods(client, v4Url, accessToken),\n    auth: createV4AuthMethods(client, v4Url, accessToken),\n    list: createV4ListMethods(client, v4Url, accessToken),\n  };\n};\n\nexport default class TMDBAPI implements ITMDBAPI {\n  private v3Url = \"https://api.themoviedb.org/3/\";\n  private v4Url = \"https://api.themoviedb.org/4/\";\n\n  v3: ITMDBAPI[\"v3\"];\n  v4: ITMDBAPI[\"v4\"];\n\n  private client: Http;\n  private apiKey?: string;\n  private accessToken?: string;\n\n  setApiKey(apiKey: string) {\n    this.apiKey = apiKey;\n    this.v3 = createV3Methods(this.client, this.v3Url, { apiKey, accessToken: this.accessToken });\n  }\n\n  setAccessToken(accessToken: string) {\n    this.accessToken = accessToken;\n    this.v3 = createV3Methods(this.client, this.v3Url, { apiKey: this.apiKey, accessToken });\n    this.v4 = createV4Methods(this.client, this.v4Url, this.accessToken);\n  }\n\n  constructor(client: Http, { apiKey, accessToken }: Credentials) {\n    if (!apiKey && !accessToken) {\n      throw new Error(\"Either apiKey or accessToken must be provided\");\n    }\n\n    this.apiKey = apiKey;\n    this.accessToken = accessToken;\n\n    this.client = client;\n\n    this.v3 = createV3Methods(this.client, this.v3Url, { apiKey, accessToken });\n\n    this.v4 = createV4Methods(this.client, this.v4Url, this.accessToken);\n  }\n}\n\nexport * from \"./types\";\n","import TMDBAPI, { Http, TMDBApiError, ITMDBAPI, Credentials } from \"../../core\";\nimport https from \"https\";\n\nexport * from \"../../core\";\n\nconst client: Http = {\n  get: async (url, accessToken) => {\n    return new Promise((resolve, reject) => {\n      https\n        .get(\n          url,\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n              ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n            },\n          },\n          (res) => {\n            let data = \"\";\n            res.on(\"data\", (chunk) => {\n              data += chunk;\n            });\n            res.on(\"end\", () => {\n              if (!res.complete) {\n                reject(new Error(\"The connection was terminated while the message was still being sent\"));\n              } else if (res.statusCode && res.statusCode >= 400) {\n                const error = JSON.parse(data) as TMDBApiError;\n                reject(new Error(error.status_message));\n              } else {\n                resolve(JSON.parse(data));\n              }\n            });\n          },\n        )\n        .on(\"error\", (err) => {\n          reject(err);\n        });\n    });\n  },\n  post: async (url, body, accessToken) => {\n    return new Promise((resolve, reject) => {\n      const data = JSON.stringify(body);\n      const options = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n        },\n        method: \"POST\",\n      };\n      const req = https\n        .request(url, options, (res) => {\n          let data = \"\";\n          res.on(\"data\", (chunk) => {\n            data += chunk;\n          });\n          res.on(\"end\", () => {\n            if (!res.complete) {\n              reject(new Error(\"The connection was terminated while the message was still being sent\"));\n            } else if (res.statusCode && res.statusCode >= 400) {\n              const error = JSON.parse(data) as TMDBApiError;\n              reject(new Error(error.status_message));\n            } else {\n              resolve(JSON.parse(data));\n            }\n          });\n        })\n        .on(\"error\", (err) => {\n          reject(err);\n        });\n      req.write(data);\n      req.end();\n    });\n  },\n  put: async (url, body, accessToken) => {\n    return new Promise((resolve, reject) => {\n      const data = JSON.stringify(body);\n      const options = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n        },\n        method: \"PUT\",\n      };\n      const req = https\n        .request(url, options, (res) => {\n          let data = \"\";\n          res.on(\"data\", (chunk) => {\n            data += chunk;\n          });\n          res.on(\"end\", () => {\n            if (!res.complete) {\n              reject(new Error(\"The connection was terminated while the message was still being sent\"));\n            } else if (res.statusCode && res.statusCode >= 400) {\n              const error = JSON.parse(data) as TMDBApiError;\n              reject(new Error(error.status_message));\n            } else {\n              resolve(JSON.parse(data));\n            }\n          });\n        })\n        .on(\"error\", (err) => {\n          reject(err);\n        });\n      req.write(data);\n      req.end();\n    });\n  },\n  delete: async (url, body, accessToken) => {\n    return new Promise((resolve, reject) => {\n      const data = JSON.stringify(body);\n      const options = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          ...(accessToken && { Authorization: `Bearer ${accessToken}` }),\n        },\n        method: \"DELETE\",\n      };\n      const req = https\n        .request(url, options, (res) => {\n          let data = \"\";\n          res.on(\"data\", (chunk) => {\n            data += chunk;\n          });\n          res.on(\"end\", () => {\n            if (!res.complete) {\n              reject(new Error(\"The connection was terminated while the message was still being sent\"));\n            } else if (res.statusCode && res.statusCode >= 400) {\n              const error = JSON.parse(data) as TMDBApiError;\n              reject(new Error(error.status_message));\n            } else {\n              resolve(JSON.parse(data));\n            }\n          });\n        })\n        .on(\"error\", (err) => {\n          reject(err);\n        });\n      req.write(data);\n      req.end();\n    });\n  },\n};\n\nexport class TMDBNodeApi extends TMDBAPI implements ITMDBAPI {\n  constructor(credentials: Credentials) {\n    super(client, credentials);\n  }\n}\n"],"mappings":"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","names":["buildV3Url","url","apiKey","params","searchParams","key","value","buildV4Url","getAccountUrlWithId","account_id","formattedUrl","createV3AccountMethods","client","apiUrl","accessToken","__async","accountId","body","createV3AuthenticationMethods","createV3CertificationsMethods","createV3ChangesMethods","createV3CollectionsMethods","collectionId","createV3CompaniesMethods","companyId","createV3ConfigurationMethods","createV3CreditsMethods","creditId","createV3DiscoverMethods","createV3FindMethods","externalId","createV3GenresMethods","createV3GuestSessionsMethods","guestSessionId","createV3KeywordsMethods","keywordId","createV3ListsMethods","listId","createV3MoviesMethods","movieId","createV3NetworksMethods","networkId","createV3PeopleMethods","personId","createV3ReviewsMethods","reviewId","createV3SearchMethods","createV3TrendingMethods","mediaType","timeWindow","language","createV3TvMethods","tvId","createV3TVEpisodeGroupsMethods","id","createV3TVEpisodesMethods","seasonNumber","episodeNumber","episodeId","createV3TVSeasonsMethods","seasonId","createV3WatchProvidersMethods","createV4Proxy","methods","target","prop","receiver","origMethod","args","createV4AccountMethods","createV4AuthMethods","getListUrl","createV4ListMethods","createV3Methods","v3Url","credentials","createV4Methods","v4Url","TMDBAPI","https","client","url","accessToken","__async","resolve","reject","https","__spreadValues","res","data","chunk","error","err","body","options","req","TMDBNodeApi","V","credentials"]}